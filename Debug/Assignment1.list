
Assignment1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004184  08004184  00005184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004244  08004244  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004244  08004244  00005244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800424c  0800424c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800424c  0800424c  0000524c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004250  08004250  00005250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004254  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000068  080042bc  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080042bc  00006330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a77  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa0  00000000  00000000  0000fb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  00011ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000651  00000000  00000000  00012320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d00  00000000  00000000  00012971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9a5  00000000  00000000  00029671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a09  00000000  00000000  00035016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bca1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028bc  00000000  00000000  000bca64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000bf320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800416c 	.word	0x0800416c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800416c 	.word	0x0800416c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <validExpression>:
#define rxBufferMax 255
extern int rxBufferWrite;							// write receivebuffer pointer
extern int rxBufferRead;								// read receivebuffer pointer
extern uint8_t rxBuffer[rxBufferMax];	// receivebuffer

int validExpression(char* expr){
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	while(*expr!='\0'){
 8000578:	e024      	b.n	80005c4 <validExpression+0x54>
		if(!((*expr>='0' && *expr<='9')||
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000580:	d903      	bls.n	800058a <validExpression+0x1a>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b39      	cmp	r3, #57	@ 0x39
 8000588:	d919      	bls.n	80005be <validExpression+0x4e>
				(*expr=='*' || *expr=='/' || *expr=='+' || *expr=='-') ||
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	781b      	ldrb	r3, [r3, #0]
		if(!((*expr>='0' && *expr<='9')||
 800058e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000590:	d015      	beq.n	80005be <validExpression+0x4e>
				(*expr=='*' || *expr=='/' || *expr=='+' || *expr=='-') ||
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b2f      	cmp	r3, #47	@ 0x2f
 8000598:	d011      	beq.n	80005be <validExpression+0x4e>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b2b      	cmp	r3, #43	@ 0x2b
 80005a0:	d00d      	beq.n	80005be <validExpression+0x4e>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b2d      	cmp	r3, #45	@ 0x2d
 80005a8:	d009      	beq.n	80005be <validExpression+0x4e>
				(*expr=='(' && *expr<=')'))) return 0;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	781b      	ldrb	r3, [r3, #0]
		if(!((*expr>='0' && *expr<='9')||
 80005ae:	2b28      	cmp	r3, #40	@ 0x28
 80005b0:	d103      	bne.n	80005ba <validExpression+0x4a>
				(*expr=='(' && *expr<=')'))) return 0;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b29      	cmp	r3, #41	@ 0x29
 80005b8:	d901      	bls.n	80005be <validExpression+0x4e>
 80005ba:	2300      	movs	r3, #0
 80005bc:	e007      	b.n	80005ce <validExpression+0x5e>
		expr++;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3301      	adds	r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
	while(*expr!='\0'){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1d6      	bne.n	800057a <validExpression+0xa>
	}
	return 1;
 80005cc:	2301      	movs	r3, #1
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <app>:

void app(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80005e2:	af00      	add	r7, sp, #0
	int ret=0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
	// uart 장치 초기화
	initUart(&huart2);
 80005ea:	4849      	ldr	r0, [pc, #292]	@ (8000710 <app+0x134>)
 80005ec:	f000 fccc 	bl	8000f88 <initUart>

	printf("Calculator\n");
 80005f0:	4848      	ldr	r0, [pc, #288]	@ (8000714 <app+0x138>)
 80005f2:	f003 f805 	bl	8003600 <puts>
	char ch=0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	char infix[rxBufferMax];
	char postfix[rxBufferMax];
	char idx=0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
	int val;
	while(1)
	{
		ch=getUart();
 8000602:	f000 fd15 	bl	8001030 <getUart>
 8000606:	4603      	mov	r3, r0
 8000608:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
		if((ch>='0' && ch<='9') || ((ch=='*') || (ch=='-')|| (ch=='+')|| (ch=='/'))) infix[idx++]=ch;
 800060c:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8000610:	2b2f      	cmp	r3, #47	@ 0x2f
 8000612:	d903      	bls.n	800061c <app+0x40>
 8000614:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8000618:	2b39      	cmp	r3, #57	@ 0x39
 800061a:	d90f      	bls.n	800063c <app+0x60>
 800061c:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8000620:	2b2a      	cmp	r3, #42	@ 0x2a
 8000622:	d00b      	beq.n	800063c <app+0x60>
 8000624:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8000628:	2b2d      	cmp	r3, #45	@ 0x2d
 800062a:	d007      	beq.n	800063c <app+0x60>
 800062c:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8000630:	2b2b      	cmp	r3, #43	@ 0x2b
 8000632:	d003      	beq.n	800063c <app+0x60>
 8000634:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8000638:	2b2f      	cmp	r3, #47	@ 0x2f
 800063a:	d10c      	bne.n	8000656 <app+0x7a>
 800063c:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8000640:	1c5a      	adds	r2, r3, #1
 8000642:	f887 226f 	strb.w	r2, [r7, #623]	@ 0x26f
 8000646:	461a      	mov	r2, r3
 8000648:	f897 1263 	ldrb.w	r1, [r7, #611]	@ 0x263
 800064c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8000650:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000654:	5499      	strb	r1, [r3, r2]
		idx%=rxBufferMax;
 8000656:	f897 226f 	ldrb.w	r2, [r7, #623]	@ 0x26f
 800065a:	4b2f      	ldr	r3, [pc, #188]	@ (8000718 <app+0x13c>)
 800065c:	fba3 1302 	umull	r1, r3, r3, r2
 8000660:	09d9      	lsrs	r1, r3, #7
 8000662:	460b      	mov	r3, r1
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	1a5b      	subs	r3, r3, r1
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f

		if(ch == '\n') {
 800066e:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8000672:	2b0a      	cmp	r3, #10
 8000674:	d139      	bne.n	80006ea <app+0x10e>
			ret=validExpression(infix);
 8000676:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff78 	bl	8000570 <validExpression>
 8000680:	f8c7 0268 	str.w	r0, [r7, #616]	@ 0x268
			if(ret){
 8000684:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8000688:	2b00      	cmp	r3, #0
 800068a:	d01d      	beq.n	80006c8 <app+0xec>

				char cval[100];
				infix[idx] = 0;
 800068c:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8000690:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8000694:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000698:	2100      	movs	r1, #0
 800069a:	54d1      	strb	r1, [r2, r3]

				val = evaluate(infix, postfix);
 800069c:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80006a0:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 80006a4:	4611      	mov	r1, r2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f972 	bl	8000990 <evaluate>
 80006ac:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
				itoa(val, cval, 10);
 80006b0:	463b      	mov	r3, r7
 80006b2:	220a      	movs	r2, #10
 80006b4:	4619      	mov	r1, r3
 80006b6:	f8d7 0264 	ldr.w	r0, [r7, #612]	@ 0x264
 80006ba:	f002 fd75 	bl	80031a8 <itoa>
				printf("=%s\n",cval);
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	4816      	ldr	r0, [pc, #88]	@ (800071c <app+0x140>)
 80006c4:	f002 ff34 	bl	8003530 <iprintf>
			}
			memset(infix,0,rxBufferMax);
 80006c8:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 80006cc:	22ff      	movs	r2, #255	@ 0xff
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 f875 	bl	80037c0 <memset>
			memset(postfix,0,rxBufferMax);
 80006d6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006da:	22ff      	movs	r2, #255	@ 0xff
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 f86e 	bl	80037c0 <memset>
			idx=0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
		}

		if(ch!=0)
 80006ea:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d00a      	beq.n	8000708 <app+0x12c>
			if(ch!='\n')
 80006f2:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 80006f6:	2b0a      	cmp	r3, #10
 80006f8:	d006      	beq.n	8000708 <app+0x12c>
				HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 10);
 80006fa:	f207 2163 	addw	r1, r7, #611	@ 0x263
 80006fe:	230a      	movs	r3, #10
 8000700:	2201      	movs	r2, #1
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <app+0x134>)
 8000704:	f001 fd32 	bl	800216c <HAL_UART_Transmit>
		ch=0;
 8000708:	2300      	movs	r3, #0
 800070a:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
		ch=getUart();
 800070e:	e778      	b.n	8000602 <app+0x26>
 8000710:	20000084 	.word	0x20000084
 8000714:	08004184 	.word	0x08004184
 8000718:	80808081 	.word	0x80808081
 800071c:	08004190 	.word	0x08004190

08000720 <infixToPostfix>:

#include "calculator.h"
#include "sll_stack.h"

// 중위 표기법을 후위 표기법으로 변환하는 함수
void infixToPostfix(char *infix, char *postfix) {
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
	Stack opStack;
	initStack(&opStack);
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f9fa 	bl	8000b28 <initStack>
	int k = 0;  // postfix 배열의 인덱스
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]

	for (int i = 0; infix[i] != '\0'; i++) {
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	e0aa      	b.n	8000894 <infixToPostfix+0x174>
		// 공백 무시
		if (infix[i] == ' ') {
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b20      	cmp	r3, #32
 8000748:	f000 80a0 	beq.w	800088c <infixToPostfix+0x16c>
			continue;
		}

		// 숫자일 경우
		if (isdigit(infix[i])) {
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	3b30      	subs	r3, #48	@ 0x30
 8000756:	2b09      	cmp	r3, #9
 8000758:	d80b      	bhi.n	8000772 <infixToPostfix+0x52>
			postfix[k++] = infix[i];
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	441a      	add	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	1c59      	adds	r1, r3, #1
 8000764:	6179      	str	r1, [r7, #20]
 8000766:	4619      	mov	r1, r3
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	440b      	add	r3, r1
 800076c:	7812      	ldrb	r2, [r2, #0]
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	e08d      	b.n	800088e <infixToPostfix+0x16e>
		}
		// 여는 괄호 처리
		else if (infix[i] == '(') {
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b28      	cmp	r3, #40	@ 0x28
 800077c:	d10b      	bne.n	8000796 <infixToPostfix+0x76>
			push(&opStack, infix[i]);
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f9e8 	bl	8000b64 <push>
 8000794:	e07b      	b.n	800088e <infixToPostfix+0x16e>
		}
		// 닫는 괄호 처리
		else if (infix[i] == ')') {
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	4413      	add	r3, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b29      	cmp	r3, #41	@ 0x29
 80007a0:	d124      	bne.n	80007ec <infixToPostfix+0xcc>
			while (!isEmpty(&opStack) && peek(&opStack) != '(') {
 80007a2:	e00d      	b.n	80007c0 <infixToPostfix+0xa0>
				postfix[k++] = pop(&opStack);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f9fb 	bl	8000ba4 <pop>
 80007ae:	4601      	mov	r1, r0
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	617a      	str	r2, [r7, #20]
 80007b6:	461a      	mov	r2, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	b2ca      	uxtb	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
			while (!isEmpty(&opStack) && peek(&opStack) != '(') {
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f9bc 	bl	8000b42 <isEmpty>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d107      	bne.n	80007e0 <infixToPostfix+0xc0>
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fa0b 	bl	8000bf0 <peek>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b28      	cmp	r3, #40	@ 0x28
 80007de:	d1e1      	bne.n	80007a4 <infixToPostfix+0x84>
			}
			pop(&opStack);  // 여는 괄호 '('를 팝
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f9dd 	bl	8000ba4 <pop>
 80007ea:	e050      	b.n	800088e <infixToPostfix+0x16e>
		}
		// 연산자 처리
		else if (infix[i] == '+' || infix[i] == '-' || infix[i] == '*'
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b2b      	cmp	r3, #43	@ 0x2b
 80007f6:	d020      	beq.n	800083a <infixToPostfix+0x11a>
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b2d      	cmp	r3, #45	@ 0x2d
 8000802:	d01a      	beq.n	800083a <infixToPostfix+0x11a>
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b2a      	cmp	r3, #42	@ 0x2a
 800080e:	d014      	beq.n	800083a <infixToPostfix+0x11a>
				|| infix[i] == '/') {
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b2f      	cmp	r3, #47	@ 0x2f
 800081a:	d138      	bne.n	800088e <infixToPostfix+0x16e>
			while (!isEmpty(&opStack)
 800081c:	e00d      	b.n	800083a <infixToPostfix+0x11a>
					&& precedence(peek(&opStack)) >= precedence(infix[i])) {
				postfix[k++] = pop(&opStack);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f9be 	bl	8000ba4 <pop>
 8000828:	4601      	mov	r1, r0
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	1c5a      	adds	r2, r3, #1
 800082e:	617a      	str	r2, [r7, #20]
 8000830:	461a      	mov	r2, r3
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	4413      	add	r3, r2
 8000836:	b2ca      	uxtb	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
			while (!isEmpty(&opStack)
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f97f 	bl	8000b42 <isEmpty>
 8000844:	4603      	mov	r3, r0
					&& precedence(peek(&opStack)) >= precedence(infix[i])) {
 8000846:	2b00      	cmp	r3, #0
 8000848:	d114      	bne.n	8000874 <infixToPostfix+0x154>
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f9ce 	bl	8000bf0 <peek>
 8000854:	4603      	mov	r3, r0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f9e3 	bl	8000c24 <precedence>
 800085e:	4604      	mov	r4, r0
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f9db 	bl	8000c24 <precedence>
 800086e:	4603      	mov	r3, r0
 8000870:	429c      	cmp	r4, r3
 8000872:	dad4      	bge.n	800081e <infixToPostfix+0xfe>
			}
			push(&opStack, infix[i]);
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f000 f96d 	bl	8000b64 <push>
 800088a:	e000      	b.n	800088e <infixToPostfix+0x16e>
			continue;
 800088c:	bf00      	nop
	for (int i = 0; infix[i] != '\0'; i++) {
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	3301      	adds	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	f47f af4e 	bne.w	800073e <infixToPostfix+0x1e>
		}
	}

	// 남아있는 연산자 모두 팝하여 postfix에 추가
	while (!isEmpty(&opStack)) {
 80008a2:	e00d      	b.n	80008c0 <infixToPostfix+0x1a0>
		postfix[k++] = pop(&opStack);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f97b 	bl	8000ba4 <pop>
 80008ae:	4601      	mov	r1, r0
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	617a      	str	r2, [r7, #20]
 80008b6:	461a      	mov	r2, r3
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	b2ca      	uxtb	r2, r1
 80008be:	701a      	strb	r2, [r3, #0]
	while (!isEmpty(&opStack)) {
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f93c 	bl	8000b42 <isEmpty>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0e9      	beq.n	80008a4 <infixToPostfix+0x184>
	}
	postfix[k] = '\0';  // 문자열 종료
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
}
 80008da:	bf00      	nop
 80008dc:	371c      	adds	r7, #28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd90      	pop	{r4, r7, pc}

080008e2 <evaluatePostfix>:

// 후위 표기법을 계산하는 함수
int evaluatePostfix(char *postfix) {
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b088      	sub	sp, #32
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
	Stack valueStack;
	initStack(&valueStack);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f91a 	bl	8000b28 <initStack>

	for (int i = 0; postfix[i] != '\0'; i++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
 80008f8:	e03a      	b.n	8000970 <evaluatePostfix+0x8e>
		// 공백 무시
		if (postfix[i] == ' ') {
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b20      	cmp	r3, #32
 8000904:	d030      	beq.n	8000968 <evaluatePostfix+0x86>
			continue;
		}

		// 숫자일 경우
		if (isdigit(postfix[i])) {
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	4413      	add	r3, r2
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	3b30      	subs	r3, #48	@ 0x30
 8000910:	2b09      	cmp	r3, #9
 8000912:	d80c      	bhi.n	800092e <evaluatePostfix+0x4c>
			push(&valueStack, postfix[i] - '0');
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f91c 	bl	8000b64 <push>
 800092c:	e01d      	b.n	800096a <evaluatePostfix+0x88>
		}
		// 연산자일 경우
		else {
			int val2 = pop(&valueStack);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f936 	bl	8000ba4 <pop>
 8000938:	61b8      	str	r0, [r7, #24]
			int val1 = pop(&valueStack);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f930 	bl	8000ba4 <pop>
 8000944:	6178      	str	r0, [r7, #20]
			int result = applyOperator(val1, val2, postfix[i]);
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	4413      	add	r3, r2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	69b9      	ldr	r1, [r7, #24]
 8000952:	6978      	ldr	r0, [r7, #20]
 8000954:	f000 f982 	bl	8000c5c <applyOperator>
 8000958:	6138      	str	r0, [r7, #16]
			push(&valueStack, result);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	6939      	ldr	r1, [r7, #16]
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f8ff 	bl	8000b64 <push>
 8000966:	e000      	b.n	800096a <evaluatePostfix+0x88>
			continue;
 8000968:	bf00      	nop
	for (int i = 0; postfix[i] != '\0'; i++) {
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3301      	adds	r3, #1
 800096e:	61fb      	str	r3, [r7, #28]
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1be      	bne.n	80008fa <evaluatePostfix+0x18>
		}
	}

	// 스택에 남은 값이 결과값
	return pop(&valueStack);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4618      	mov	r0, r3
 8000982:	f000 f90f 	bl	8000ba4 <pop>
 8000986:	4603      	mov	r3, r0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <evaluate>:

int evaluate(char *in, char *pos) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	int ret;

	infixToPostfix(in, pos);
 800099a:	6839      	ldr	r1, [r7, #0]
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff febf 	bl	8000720 <infixToPostfix>
	ret = evaluatePostfix(pos);
 80009a2:	6838      	ldr	r0, [r7, #0]
 80009a4:	f7ff ff9d 	bl	80008e2 <evaluatePostfix>
 80009a8:	60f8      	str	r0, [r7, #12]

	return ret;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009b8:	f000 fb96 	bl	80010e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009bc:	f000 f80c 	bl	80009d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009c0:	f000 f892 	bl	8000ae8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80009c4:	f000 f866 	bl	8000a94 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	initUart(&huart2);
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <main+0x20>)
 80009ca:	f000 fadd 	bl	8000f88 <initUart>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		app();
 80009ce:	f7ff fe05 	bl	80005dc <app>
 80009d2:	e7fc      	b.n	80009ce <main+0x1a>
 80009d4:	20000084 	.word	0x20000084

080009d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	@ 0x50
 80009dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	2230      	movs	r2, #48	@ 0x30
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 feea 	bl	80037c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <SystemClock_Config+0xb4>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	4a21      	ldr	r2, [pc, #132]	@ (8000a8c <SystemClock_Config+0xb4>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <SystemClock_Config+0xb4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <SystemClock_Config+0xb8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a1b      	ldr	r2, [pc, #108]	@ (8000a90 <SystemClock_Config+0xb8>)
 8000a22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <SystemClock_Config+0xb8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a34:	2302      	movs	r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a44:	f107 0320 	add.w	r3, r7, #32
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fee7 	bl	800181c <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x80>
		Error_Handler();
 8000a54:	f000 f862 	bl	8000b1c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f94a 	bl	8001d0c <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xaa>
		Error_Handler();
 8000a7e:	f000 f84d 	bl	8000b1c <Error_Handler>
	}
}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	@ 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40007000 	.word	0x40007000

08000a94 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <MX_USART2_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000acc:	f001 fafe 	bl	80020cc <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000ad6:	f000 f821 	bl	8000b1c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000084 	.word	0x20000084
 8000ae4:	40004400 	.word	0x40004400

08000ae8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_GPIO_Init+0x30>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a08      	ldr	r2, [pc, #32]	@ (8000b18 <MX_GPIO_Init+0x30>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_GPIO_Init+0x30>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <Error_Handler+0x8>

08000b28 <initStack>:
#include "sll_stack.h"
#include <stdio.h>
#include <stdlib.h>

// 스택 초기화 함수
void initStack(Stack *s) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	s->top = NULL;  // 스택은 초기화 시 비어있으므로 top을 NULL로 설정
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <isEmpty>:

// 스택이 비었는지 확인
int isEmpty(Stack *s) {
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
	return s->top == NULL;  // top이 NULL이면 스택이 비어있음
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	bf0c      	ite	eq
 8000b52:	2301      	moveq	r3, #1
 8000b54:	2300      	movne	r3, #0
 8000b56:	b2db      	uxtb	r3, r3
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <push>:

// 스택에 원소를 추가 (push)하는 함수
void push(Stack *s, int value) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	Node *newNode = (Node*) malloc(sizeof(Node));
 8000b6e:	2008      	movs	r0, #8
 8000b70:	f002 fb1c 	bl	80031ac <malloc>
 8000b74:	4603      	mov	r3, r0
 8000b76:	60fb      	str	r3, [r7, #12]
	if (!newNode) {
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d103      	bne.n	8000b86 <push+0x22>
		printf("Memory allocation failed\n");
 8000b7e:	4808      	ldr	r0, [pc, #32]	@ (8000ba0 <push+0x3c>)
 8000b80:	f002 fd3e 	bl	8003600 <puts>
		return;
 8000b84:	e009      	b.n	8000b9a <push+0x36>
	}
	newNode->data = value;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	601a      	str	r2, [r3, #0]
	newNode->next = s->top;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	605a      	str	r2, [r3, #4]
	s->top = newNode;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	601a      	str	r2, [r3, #0]
}
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	08004198 	.word	0x08004198

08000ba4 <pop>:

// 스택에서 원소를 제거 (pop)하는 함수
int pop(Stack *s) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	if (isEmpty(s)) {
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ffc8 	bl	8000b42 <isEmpty>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <pop+0x20>
		printf("Stack Underflow\n");
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <pop+0x48>)
 8000bba:	f002 fd21 	bl	8003600 <puts>
		return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	e00e      	b.n	8000be2 <pop+0x3e>
	}
	Node *temp = s->top;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
	int poppedValue = temp->data;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	60bb      	str	r3, [r7, #8]
	s->top = s->top->next;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	601a      	str	r2, [r3, #0]
	free(temp);
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f002 faee 	bl	80031bc <free>
	return poppedValue;
 8000be0:	68bb      	ldr	r3, [r7, #8]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	080041b4 	.word	0x080041b4

08000bf0 <peek>:

// 스택의 top 값을 확인하는 함수 (peek)
int peek(Stack *s) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	if (isEmpty(s)) {
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ffa2 	bl	8000b42 <isEmpty>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d005      	beq.n	8000c10 <peek+0x20>
		printf("Stack is empty\n");
 8000c04:	4806      	ldr	r0, [pc, #24]	@ (8000c20 <peek+0x30>)
 8000c06:	f002 fcfb 	bl	8003600 <puts>
		return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e002      	b.n	8000c16 <peek+0x26>
	}
	return s->top->data;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	080041c4 	.word	0x080041c4

08000c24 <precedence>:

// 연산자 우선순위 확인 함수
int precedence(char op) {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	if (op == '+' || op == '-') {
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b2b      	cmp	r3, #43	@ 0x2b
 8000c32:	d002      	beq.n	8000c3a <precedence+0x16>
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b2d      	cmp	r3, #45	@ 0x2d
 8000c38:	d101      	bne.n	8000c3e <precedence+0x1a>
		return 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e008      	b.n	8000c50 <precedence+0x2c>
	} else if (op == '*' || op == '/') {
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c42:	d002      	beq.n	8000c4a <precedence+0x26>
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c48:	d101      	bne.n	8000c4e <precedence+0x2a>
		return 2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	e000      	b.n	8000c50 <precedence+0x2c>
	}
	return 0;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <applyOperator>:

// 연산 수행 함수
int applyOperator(int a, int b, char op) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	4613      	mov	r3, r2
 8000c68:	71fb      	strb	r3, [r7, #7]
	switch (op) {
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	3b2a      	subs	r3, #42	@ 0x2a
 8000c6e:	2b05      	cmp	r3, #5
 8000c70:	d820      	bhi.n	8000cb4 <applyOperator+0x58>
 8000c72:	a201      	add	r2, pc, #4	@ (adr r2, 8000c78 <applyOperator+0x1c>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000ca1 	.word	0x08000ca1
 8000c7c:	08000c91 	.word	0x08000c91
 8000c80:	08000cb5 	.word	0x08000cb5
 8000c84:	08000c99 	.word	0x08000c99
 8000c88:	08000cb5 	.word	0x08000cb5
 8000c8c:	08000cab 	.word	0x08000cab
		case '+':
			return a + b;
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	4413      	add	r3, r2
 8000c96:	e00e      	b.n	8000cb6 <applyOperator+0x5a>
		case '-':
			return a - b;
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	e00a      	b.n	8000cb6 <applyOperator+0x5a>
		case '*':
			return a * b;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	fb02 f303 	mul.w	r3, r2, r3
 8000ca8:	e005      	b.n	8000cb6 <applyOperator+0x5a>
		case '/':
			return a / b;
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cb2:	e000      	b.n	8000cb6 <applyOperator+0x5a>
		default:
			return 0;
 8000cb4:	2300      	movs	r3, #0
	}
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1d      	ldr	r2, [pc, #116]	@ (8000da8 <HAL_UART_MspInit+0x94>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d133      	bne.n	8000d9e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <HAL_UART_MspInit+0x98>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000dac <HAL_UART_MspInit+0x98>)
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d46:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <HAL_UART_MspInit+0x98>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <HAL_UART_MspInit+0x98>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a14      	ldr	r2, [pc, #80]	@ (8000dac <HAL_UART_MspInit+0x98>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_UART_MspInit+0x98>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <HAL_UART_MspInit+0x9c>)
 8000d8a:	f000 fbc3 	bl	8001514 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	2026      	movs	r0, #38	@ 0x26
 8000d94:	f000 faf5 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d98:	2026      	movs	r0, #38	@ 0x26
 8000d9a:	f000 fb0e 	bl	80013ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	@ 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40004400 	.word	0x40004400
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <NMI_Handler+0x4>

08000dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0a:	f000 f9bf 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//  SystickCallback();
  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <USART2_IRQHandler+0x10>)
 8000e1a:	f001 fa57 	bl	80022cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000084 	.word	0x20000084

08000e28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e00a      	b.n	8000e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e3a:	f3af 8000 	nop.w
 8000e3e:	4601      	mov	r1, r0
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	60ba      	str	r2, [r7, #8]
 8000e46:	b2ca      	uxtb	r2, r1
 8000e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf0      	blt.n	8000e3a <_read+0x12>
  }

  return len;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <_isatty>:

int _isatty(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f002 fcbe 	bl	800387c <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20020000 	.word	0x20020000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	200000cc 	.word	0x200000cc
 8000f34:	20000330 	.word	0x20000330

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <_write>:
#define rxBufferMax 255
int rxBufferWrite;							// write receivebuffer pointer
int rxBufferRead;								// read receivebuffer pointer
uint8_t rxBuffer[rxBufferMax];	// receivebuffer

int _write(int file, char* p, int len){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, (uint8_t*)p, len, 10);
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <_write+0x28>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	230a      	movs	r3, #10
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	f001 f8fa 	bl	800216c <HAL_UART_Transmit>
	return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000d0 	.word	0x200000d0

08000f88 <initUart>:


//initialize uart device
void initUart(UART_HandleTypeDef* inHuart){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	//initialize uart device name
	myHuart = inHuart;
 8000f90:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <initUart+0x34>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]

	//receive interrupt setting
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <initUart+0x34>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4908      	ldr	r1, [pc, #32]	@ (8000fc0 <initUart+0x38>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 f96f 	bl	8002282 <HAL_UART_Receive_IT>
	rxBufferRead = rxBufferWrite = 0;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <initUart+0x3c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <initUart+0x3c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a06      	ldr	r2, [pc, #24]	@ (8000fc8 <initUart+0x40>)
 8000fb0:	6013      	str	r3, [r2, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200000d0 	.word	0x200000d0
 8000fc0:	200000d4 	.word	0x200000d4
 8000fc4:	200000d8 	.word	0x200000d8
 8000fc8:	200000dc 	.word	0x200000dc

08000fcc <HAL_UART_RxCpltCallback>:

// 지정되어 있는 함수로 스펠링도 틀리면 안된다
// 문자수신 처리 함수 구현
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	// 수신된 문자를 버퍼에 저장하고 쓰기 포인터의 값을 1 증가
	rxBuffer[rxBufferWrite++] = rxChar;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <HAL_UART_RxCpltCallback+0x50>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	4910      	ldr	r1, [pc, #64]	@ (800101c <HAL_UART_RxCpltCallback+0x50>)
 8000fdc:	600a      	str	r2, [r1, #0]
 8000fde:	4a10      	ldr	r2, [pc, #64]	@ (8001020 <HAL_UART_RxCpltCallback+0x54>)
 8000fe0:	7811      	ldrb	r1, [r2, #0]
 8000fe2:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <HAL_UART_RxCpltCallback+0x58>)
 8000fe4:	54d1      	strb	r1, [r2, r3]
	// 쓰기 포인터의 값이 최대치에 도달하면 다시 0으로 초기화
	rxBufferWrite %= rxBufferMax;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <HAL_UART_RxCpltCallback+0x50>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <HAL_UART_RxCpltCallback+0x5c>)
 8000fec:	fb83 1302 	smull	r1, r3, r3, r2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	11d9      	asrs	r1, r3, #7
 8000ff4:	17d3      	asrs	r3, r2, #31
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	1a5b      	subs	r3, r3, r1
 8000ffe:	1ad1      	subs	r1, r2, r3
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_UART_RxCpltCallback+0x50>)
 8001002:	6019      	str	r1, [r3, #0]
	// 다음 문자 수신 인터럽트를 위하여 재설정 (아래를 선언하여 재설정을 안해주면 한번만 되고 그다음 버퍼 저장을 안해버림)
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <HAL_UART_RxCpltCallback+0x60>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2201      	movs	r2, #1
 800100a:	4905      	ldr	r1, [pc, #20]	@ (8001020 <HAL_UART_RxCpltCallback+0x54>)
 800100c:	4618      	mov	r0, r3
 800100e:	f001 f938 	bl	8002282 <HAL_UART_Receive_IT>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000d8 	.word	0x200000d8
 8001020:	200000d4 	.word	0x200000d4
 8001024:	200000e0 	.word	0x200000e0
 8001028:	80808081 	.word	0x80808081
 800102c:	200000d0 	.word	0x200000d0

08001030 <getUart>:

// 버퍼에서 문자 한개 꺼내오기
uint8_t getUart(){
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
	uint8_t result;
	// 쓰기 포인터와 읽기 포인터가 없으면 수신된 문자 없음
	if(rxBufferWrite == rxBufferRead) return 0;
 8001036:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <getUart+0x54>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <getUart+0x58>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d101      	bne.n	8001046 <getUart+0x16>
 8001042:	2300      	movs	r3, #0
 8001044:	e017      	b.n	8001076 <getUart+0x46>
	else {
		//읽기 포인터가 가르키는 위치의 버퍼문자를 꺼내고, 읽기 포인터를 1 증가
		result = rxBuffer[rxBufferRead++];
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <getUart+0x58>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	490e      	ldr	r1, [pc, #56]	@ (8001088 <getUart+0x58>)
 800104e:	600a      	str	r2, [r1, #0]
 8001050:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <getUart+0x5c>)
 8001052:	5cd3      	ldrb	r3, [r2, r3]
 8001054:	71fb      	strb	r3, [r7, #7]
		//읽기 포인터가 최대치에 도달하면 다시 0으로 초기화
		rxBufferRead %= rxBufferMax;
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <getUart+0x58>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <getUart+0x60>)
 800105c:	fb83 1302 	smull	r1, r3, r3, r2
 8001060:	4413      	add	r3, r2
 8001062:	11d9      	asrs	r1, r3, #7
 8001064:	17d3      	asrs	r3, r2, #31
 8001066:	1ac9      	subs	r1, r1, r3
 8001068:	460b      	mov	r3, r1
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	1a5b      	subs	r3, r3, r1
 800106e:	1ad1      	subs	r1, r2, r3
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <getUart+0x58>)
 8001072:	6019      	str	r1, [r3, #0]
	}
	return result;
 8001074:	79fb      	ldrb	r3, [r7, #7]
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200000d8 	.word	0x200000d8
 8001088:	200000dc 	.word	0x200000dc
 800108c:	200000e0 	.word	0x200000e0
 8001090:	80808081 	.word	0x80808081

08001094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001098:	f7ff ff4e 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	@ (80010d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	@ (80010e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c2:	f002 fbe1 	bl	8003888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff fc75 	bl	80009b4 <main>
  bx  lr    
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010d8:	08004254 	.word	0x08004254
  ldr r2, =_sbss
 80010dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010e0:	20000330 	.word	0x20000330

080010e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC_IRQHandler>
	...

080010e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <HAL_Init+0x40>)
 80010f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <HAL_Init+0x40>)
 80010fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a07      	ldr	r2, [pc, #28]	@ (8001128 <HAL_Init+0x40>)
 800110a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800110e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001110:	2003      	movs	r0, #3
 8001112:	f000 f92b 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001116:	200f      	movs	r0, #15
 8001118:	f000 f808 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fdd2 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023c00 	.word	0x40023c00

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f943 	bl	80013d6 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f90b 	bl	8001382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008
 80011b0:	200001e0 	.word	0x200001e0

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200001e0 	.word	0x200001e0

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	@ (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	@ (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	@ (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	@ 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	@ 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	@ (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001394:	f7ff ff3e 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f7ff ff8e 	bl	80012c0 <NVIC_EncodePriority>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff5d 	bl	800126c <__NVIC_SetPriority>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff31 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffa2 	bl	8001328 <SysTick_Config>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b084      	sub	sp, #16
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff feda 	bl	80011b4 <HAL_GetTick>
 8001400:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d008      	beq.n	8001420 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2280      	movs	r2, #128	@ 0x80
 8001412:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e052      	b.n	80014c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0216 	bic.w	r2, r2, #22
 800142e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800143e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	2b00      	cmp	r3, #0
 8001446:	d103      	bne.n	8001450 <HAL_DMA_Abort+0x62>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0208 	bic.w	r2, r2, #8
 800145e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001470:	e013      	b.n	800149a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001472:	f7ff fe9f 	bl	80011b4 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b05      	cmp	r3, #5
 800147e:	d90c      	bls.n	800149a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2220      	movs	r2, #32
 8001484:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2203      	movs	r2, #3
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e015      	b.n	80014c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1e4      	bne.n	8001472 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ac:	223f      	movs	r2, #63	@ 0x3f
 80014ae:	409a      	lsls	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d004      	beq.n	80014ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e00c      	b.n	8001506 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2205      	movs	r2, #5
 80014f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	@ 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	e159      	b.n	80017e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8148 	bne.w	80017de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d005      	beq.n	8001566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	2b02      	cmp	r3, #2
 8001564:	d130      	bne.n	80015c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d017      	beq.n	8001604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d123      	bne.n	8001658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0203 	and.w	r2, r3, #3
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80a2 	beq.w	80017de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b57      	ldr	r3, [pc, #348]	@ (80017fc <HAL_GPIO_Init+0x2e8>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	4a56      	ldr	r2, [pc, #344]	@ (80017fc <HAL_GPIO_Init+0x2e8>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016aa:	4b54      	ldr	r3, [pc, #336]	@ (80017fc <HAL_GPIO_Init+0x2e8>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b6:	4a52      	ldr	r2, [pc, #328]	@ (8001800 <HAL_GPIO_Init+0x2ec>)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a49      	ldr	r2, [pc, #292]	@ (8001804 <HAL_GPIO_Init+0x2f0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x202>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a48      	ldr	r2, [pc, #288]	@ (8001808 <HAL_GPIO_Init+0x2f4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x1fe>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a47      	ldr	r2, [pc, #284]	@ (800180c <HAL_GPIO_Init+0x2f8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x1fa>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a46      	ldr	r2, [pc, #280]	@ (8001810 <HAL_GPIO_Init+0x2fc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x1f6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a45      	ldr	r2, [pc, #276]	@ (8001814 <HAL_GPIO_Init+0x300>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x1f2>
 8001702:	2304      	movs	r3, #4
 8001704:	e008      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001706:	2307      	movs	r3, #7
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x204>
 800170a:	2303      	movs	r3, #3
 800170c:	e004      	b.n	8001718 <HAL_GPIO_Init+0x204>
 800170e:	2302      	movs	r3, #2
 8001710:	e002      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001716:	2300      	movs	r3, #0
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f002 0203 	and.w	r2, r2, #3
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	4093      	lsls	r3, r2
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001728:	4935      	ldr	r1, [pc, #212]	@ (8001800 <HAL_GPIO_Init+0x2ec>)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001736:	4b38      	ldr	r3, [pc, #224]	@ (8001818 <HAL_GPIO_Init+0x304>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800175a:	4a2f      	ldr	r2, [pc, #188]	@ (8001818 <HAL_GPIO_Init+0x304>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001760:	4b2d      	ldr	r3, [pc, #180]	@ (8001818 <HAL_GPIO_Init+0x304>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001784:	4a24      	ldr	r2, [pc, #144]	@ (8001818 <HAL_GPIO_Init+0x304>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800178a:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <HAL_GPIO_Init+0x304>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001818 <HAL_GPIO_Init+0x304>)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b4:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <HAL_GPIO_Init+0x304>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001818 <HAL_GPIO_Init+0x304>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	f67f aea2 	bls.w	8001530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40013800 	.word	0x40013800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	40020800 	.word	0x40020800
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40021000 	.word	0x40021000
 8001818:	40013c00 	.word	0x40013c00

0800181c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e267      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d075      	beq.n	8001926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800183a:	4b88      	ldr	r3, [pc, #544]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b04      	cmp	r3, #4
 8001844:	d00c      	beq.n	8001860 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001846:	4b85      	ldr	r3, [pc, #532]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800184e:	2b08      	cmp	r3, #8
 8001850:	d112      	bne.n	8001878 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001852:	4b82      	ldr	r3, [pc, #520]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800185a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800185e:	d10b      	bne.n	8001878 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	4b7e      	ldr	r3, [pc, #504]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d05b      	beq.n	8001924 <HAL_RCC_OscConfig+0x108>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d157      	bne.n	8001924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e242      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001880:	d106      	bne.n	8001890 <HAL_RCC_OscConfig+0x74>
 8001882:	4b76      	ldr	r3, [pc, #472]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a75      	ldr	r2, [pc, #468]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xb0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x98>
 800189a:	4b70      	ldr	r3, [pc, #448]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a6f      	ldr	r2, [pc, #444]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6c      	ldr	r2, [pc, #432]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xb0>
 80018b4:	4b69      	ldr	r3, [pc, #420]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a68      	ldr	r2, [pc, #416]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b66      	ldr	r3, [pc, #408]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a65      	ldr	r2, [pc, #404]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fc6e 	bl	80011b4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fc6a 	bl	80011b4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	@ 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e207      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b5b      	ldr	r3, [pc, #364]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xc0>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fc5a 	bl	80011b4 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fc56 	bl	80011b4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	@ 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1f3      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	4b51      	ldr	r3, [pc, #324]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0xe8>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d063      	beq.n	80019fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001932:	4b4a      	ldr	r3, [pc, #296]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193e:	4b47      	ldr	r3, [pc, #284]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001946:	2b08      	cmp	r3, #8
 8001948:	d11c      	bne.n	8001984 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800194a:	4b44      	ldr	r3, [pc, #272]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d116      	bne.n	8001984 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001956:	4b41      	ldr	r3, [pc, #260]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <HAL_RCC_OscConfig+0x152>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d001      	beq.n	800196e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e1c7      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4937      	ldr	r1, [pc, #220]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	e03a      	b.n	80019fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800198c:	4b34      	ldr	r3, [pc, #208]	@ (8001a60 <HAL_RCC_OscConfig+0x244>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff fc0f 	bl	80011b4 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199a:	f7ff fc0b 	bl	80011b4 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e1a8      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	4b28      	ldr	r3, [pc, #160]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4925      	ldr	r1, [pc, #148]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
 80019cc:	e015      	b.n	80019fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ce:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <HAL_RCC_OscConfig+0x244>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff fbee 	bl	80011b4 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff fbea 	bl	80011b4 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e187      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d036      	beq.n	8001a74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d016      	beq.n	8001a3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <HAL_RCC_OscConfig+0x248>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7ff fbce 	bl	80011b4 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1c:	f7ff fbca 	bl	80011b4 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e167      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x200>
 8001a3a:	e01b      	b.n	8001a74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_RCC_OscConfig+0x248>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fbb7 	bl	80011b4 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a48:	e00e      	b.n	8001a68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fbb3 	bl	80011b4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d907      	bls.n	8001a68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e150      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	42470000 	.word	0x42470000
 8001a64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	4b88      	ldr	r3, [pc, #544]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1ea      	bne.n	8001a4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 8097 	beq.w	8001bb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b81      	ldr	r3, [pc, #516]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10f      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	4b7d      	ldr	r3, [pc, #500]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	4a7c      	ldr	r2, [pc, #496]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa2:	4b7a      	ldr	r3, [pc, #488]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab2:	4b77      	ldr	r3, [pc, #476]	@ (8001c90 <HAL_RCC_OscConfig+0x474>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d118      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001abe:	4b74      	ldr	r3, [pc, #464]	@ (8001c90 <HAL_RCC_OscConfig+0x474>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a73      	ldr	r2, [pc, #460]	@ (8001c90 <HAL_RCC_OscConfig+0x474>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aca:	f7ff fb73 	bl	80011b4 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad2:	f7ff fb6f 	bl	80011b4 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e10c      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c90 <HAL_RCC_OscConfig+0x474>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x2ea>
 8001af8:	4b64      	ldr	r3, [pc, #400]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afc:	4a63      	ldr	r2, [pc, #396]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b04:	e01c      	b.n	8001b40 <HAL_RCC_OscConfig+0x324>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x30c>
 8001b0e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b12:	4a5e      	ldr	r2, [pc, #376]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b1e:	4a5b      	ldr	r2, [pc, #364]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0x324>
 8001b28:	4b58      	ldr	r3, [pc, #352]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2c:	4a57      	ldr	r2, [pc, #348]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b2e:	f023 0301 	bic.w	r3, r3, #1
 8001b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b34:	4b55      	ldr	r3, [pc, #340]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b38:	4a54      	ldr	r2, [pc, #336]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b3a:	f023 0304 	bic.w	r3, r3, #4
 8001b3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d015      	beq.n	8001b74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7ff fb34 	bl	80011b4 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b50:	f7ff fb30 	bl	80011b4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e0cb      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b66:	4b49      	ldr	r3, [pc, #292]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0ee      	beq.n	8001b50 <HAL_RCC_OscConfig+0x334>
 8001b72:	e014      	b.n	8001b9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b74:	f7ff fb1e 	bl	80011b4 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fb1a 	bl	80011b4 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e0b5      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b92:	4b3e      	ldr	r3, [pc, #248]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1ee      	bne.n	8001b7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d105      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba4:	4b39      	ldr	r3, [pc, #228]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	4a38      	ldr	r2, [pc, #224]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001baa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80a1 	beq.w	8001cfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bba:	4b34      	ldr	r3, [pc, #208]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d05c      	beq.n	8001c80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d141      	bne.n	8001c52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <HAL_RCC_OscConfig+0x478>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff faee 	bl	80011b4 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff faea 	bl	80011b4 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e087      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bee:	4b27      	ldr	r3, [pc, #156]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69da      	ldr	r2, [r3, #28]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c08:	019b      	lsls	r3, r3, #6
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c10:	085b      	lsrs	r3, r3, #1
 8001c12:	3b01      	subs	r3, #1
 8001c14:	041b      	lsls	r3, r3, #16
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1c:	061b      	lsls	r3, r3, #24
 8001c1e:	491b      	ldr	r1, [pc, #108]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c24:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <HAL_RCC_OscConfig+0x478>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fac3 	bl	80011b4 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c32:	f7ff fabf 	bl	80011b4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e05c      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x416>
 8001c50:	e054      	b.n	8001cfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <HAL_RCC_OscConfig+0x478>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff faac 	bl	80011b4 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff faa8 	bl	80011b4 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e045      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x444>
 8001c7e:	e03d      	b.n	8001cfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e038      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40007000 	.word	0x40007000
 8001c94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <HAL_RCC_OscConfig+0x4ec>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d028      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d121      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d11a      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d111      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cde:	085b      	lsrs	r3, r3, #1
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0cc      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d20:	4b68      	ldr	r3, [pc, #416]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d90c      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b65      	ldr	r3, [pc, #404]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b63      	ldr	r3, [pc, #396]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0b8      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d60:	4b59      	ldr	r3, [pc, #356]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4a58      	ldr	r2, [pc, #352]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d78:	4b53      	ldr	r3, [pc, #332]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b50      	ldr	r3, [pc, #320]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	494d      	ldr	r1, [pc, #308]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d044      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b47      	ldr	r3, [pc, #284]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d119      	bne.n	8001dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e07f      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d003      	beq.n	8001dca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dca:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e06f      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dda:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e067      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dea:	4b37      	ldr	r3, [pc, #220]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f023 0203 	bic.w	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4934      	ldr	r1, [pc, #208]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dfc:	f7ff f9da 	bl	80011b4 <HAL_GetTick>
 8001e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e04:	f7ff f9d6 	bl	80011b4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e04f      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 020c 	and.w	r2, r3, #12
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d1eb      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d20c      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b20      	ldr	r3, [pc, #128]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e032      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e60:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4916      	ldr	r1, [pc, #88]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	490e      	ldr	r1, [pc, #56]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e92:	f000 f821 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e96:	4602      	mov	r2, r0
 8001e98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	490a      	ldr	r1, [pc, #40]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	5ccb      	ldrb	r3, [r1, r3]
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f93a 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023c00 	.word	0x40023c00
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	080041d4 	.word	0x080041d4
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001edc:	b090      	sub	sp, #64	@ 0x40
 8001ede:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef0:	4b59      	ldr	r3, [pc, #356]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d00d      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x40>
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	f200 80a1 	bhi.w	8002044 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x34>
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f0a:	e09b      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4b53      	ldr	r3, [pc, #332]	@ (800205c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f10:	e09b      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f12:	4b53      	ldr	r3, [pc, #332]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f16:	e098      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f18:	4b4f      	ldr	r3, [pc, #316]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f22:	4b4d      	ldr	r3, [pc, #308]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d028      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	099b      	lsrs	r3, r3, #6
 8001f34:	2200      	movs	r2, #0
 8001f36:	623b      	str	r3, [r7, #32]
 8001f38:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f40:	2100      	movs	r1, #0
 8001f42:	4b47      	ldr	r3, [pc, #284]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f44:	fb03 f201 	mul.w	r2, r3, r1
 8001f48:	2300      	movs	r3, #0
 8001f4a:	fb00 f303 	mul.w	r3, r0, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a43      	ldr	r2, [pc, #268]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f52:	fba0 1202 	umull	r1, r2, r0, r2
 8001f56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f58:	460a      	mov	r2, r1
 8001f5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f5e:	4413      	add	r3, r2
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f64:	2200      	movs	r2, #0
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	61fa      	str	r2, [r7, #28]
 8001f6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f72:	f7fe f985 	bl	8000280 <__aeabi_uldivmod>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f7e:	e053      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f80:	4b35      	ldr	r3, [pc, #212]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	2200      	movs	r2, #0
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	617a      	str	r2, [r7, #20]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f92:	f04f 0b00 	mov.w	fp, #0
 8001f96:	4652      	mov	r2, sl
 8001f98:	465b      	mov	r3, fp
 8001f9a:	f04f 0000 	mov.w	r0, #0
 8001f9e:	f04f 0100 	mov.w	r1, #0
 8001fa2:	0159      	lsls	r1, r3, #5
 8001fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa8:	0150      	lsls	r0, r2, #5
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	ebb2 080a 	subs.w	r8, r2, sl
 8001fb2:	eb63 090b 	sbc.w	r9, r3, fp
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fca:	ebb2 0408 	subs.w	r4, r2, r8
 8001fce:	eb63 0509 	sbc.w	r5, r3, r9
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	00eb      	lsls	r3, r5, #3
 8001fdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fe0:	00e2      	lsls	r2, r4, #3
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	461d      	mov	r5, r3
 8001fe6:	eb14 030a 	adds.w	r3, r4, sl
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	eb45 030b 	adc.w	r3, r5, fp
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ffe:	4629      	mov	r1, r5
 8002000:	028b      	lsls	r3, r1, #10
 8002002:	4621      	mov	r1, r4
 8002004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002008:	4621      	mov	r1, r4
 800200a:	028a      	lsls	r2, r1, #10
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002012:	2200      	movs	r2, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	60fa      	str	r2, [r7, #12]
 8002018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800201c:	f7fe f930 	bl	8000280 <__aeabi_uldivmod>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4613      	mov	r3, r2
 8002026:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002028:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	3301      	adds	r3, #1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002038:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800203a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002042:	e002      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_RCC_GetSysClockFreq+0x184>)
 8002046:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800204a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800204c:	4618      	mov	r0, r3
 800204e:	3740      	adds	r7, #64	@ 0x40
 8002050:	46bd      	mov	sp, r7
 8002052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	00f42400 	.word	0x00f42400
 8002060:	017d7840 	.word	0x017d7840

08002064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002068:	4b03      	ldr	r3, [pc, #12]	@ (8002078 <HAL_RCC_GetHCLKFreq+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000000 	.word	0x20000000

0800207c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002080:	f7ff fff0 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b05      	ldr	r3, [pc, #20]	@ (800209c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	0a9b      	lsrs	r3, r3, #10
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4903      	ldr	r1, [pc, #12]	@ (80020a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40023800 	.word	0x40023800
 80020a0:	080041e4 	.word	0x080041e4

080020a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020a8:	f7ff ffdc 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	0b5b      	lsrs	r3, r3, #13
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	4903      	ldr	r1, [pc, #12]	@ (80020c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40023800 	.word	0x40023800
 80020c8:	080041e4 	.word	0x080041e4

080020cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e042      	b.n	8002164 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe fe0e 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2224      	movs	r2, #36	@ 0x24
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800210e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fdbd 	bl	8002c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	@ 0x28
 8002170:	af02      	add	r7, sp, #8
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b20      	cmp	r3, #32
 800218a:	d175      	bne.n	8002278 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_UART_Transmit+0x2c>
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e06e      	b.n	800227a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2221      	movs	r2, #33	@ 0x21
 80021a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021aa:	f7ff f803 	bl	80011b4 <HAL_GetTick>
 80021ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	88fa      	ldrh	r2, [r7, #6]
 80021b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	88fa      	ldrh	r2, [r7, #6]
 80021ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021c4:	d108      	bne.n	80021d8 <HAL_UART_Transmit+0x6c>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d104      	bne.n	80021d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	e003      	b.n	80021e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021e0:	e02e      	b.n	8002240 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2200      	movs	r2, #0
 80021ea:	2180      	movs	r1, #128	@ 0x80
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fb1f 	bl	8002830 <UART_WaitOnFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e03a      	b.n	800227a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10b      	bne.n	8002222 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	3302      	adds	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	e007      	b.n	8002232 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	3301      	adds	r3, #1
 8002230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002236:	b29b      	uxth	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1cb      	bne.n	80021e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2200      	movs	r2, #0
 8002252:	2140      	movs	r1, #64	@ 0x40
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 faeb 	bl	8002830 <UART_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e006      	b.n	800227a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	e000      	b.n	800227a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002278:	2302      	movs	r3, #2
  }
}
 800227a:	4618      	mov	r0, r3
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	4613      	mov	r3, r2
 800228e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b20      	cmp	r3, #32
 800229a:	d112      	bne.n	80022c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_UART_Receive_IT+0x26>
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e00b      	b.n	80022c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	461a      	mov	r2, r3
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 fb12 	bl	80028e2 <UART_Start_Receive_IT>
 80022be:	4603      	mov	r3, r0
 80022c0:	e000      	b.n	80022c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80022c2:	2302      	movs	r3, #2
  }
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b0ba      	sub	sp, #232	@ 0xe8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800230a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10f      	bne.n	8002332 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_UART_IRQHandler+0x66>
 800231e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fbf2 	bl	8002b14 <UART_Receive_IT>
      return;
 8002330:	e25b      	b.n	80027ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 80de 	beq.w	80024f8 <HAL_UART_IRQHandler+0x22c>
 800233c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d106      	bne.n	8002356 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800234c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80d1 	beq.w	80024f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00b      	beq.n	800237a <HAL_UART_IRQHandler+0xae>
 8002362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	f043 0201 	orr.w	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800237a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_UART_IRQHandler+0xd2>
 8002386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	f043 0202 	orr.w	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800239e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_UART_IRQHandler+0xf6>
 80023aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	f043 0204 	orr.w	r2, r3, #4
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d011      	beq.n	80023f2 <HAL_UART_IRQHandler+0x126>
 80023ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	f043 0208 	orr.w	r2, r3, #8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 81f2 	beq.w	80027e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_UART_IRQHandler+0x14e>
 8002408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fb7d 	bl	8002b14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002424:	2b40      	cmp	r3, #64	@ 0x40
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d103      	bne.n	8002446 <HAL_UART_IRQHandler+0x17a>
 800243e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d04f      	beq.n	80024e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fa85 	bl	8002956 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002456:	2b40      	cmp	r3, #64	@ 0x40
 8002458:	d141      	bne.n	80024de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3314      	adds	r3, #20
 8002460:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002464:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002468:	e853 3f00 	ldrex	r3, [r3]
 800246c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002470:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3314      	adds	r3, #20
 8002482:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002486:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800248a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002496:	e841 2300 	strex	r3, r2, [r1]
 800249a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800249e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1d9      	bne.n	800245a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d013      	beq.n	80024d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b2:	4a7e      	ldr	r2, [pc, #504]	@ (80026ac <HAL_UART_IRQHandler+0x3e0>)
 80024b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f807 	bl	80014ce <HAL_DMA_Abort_IT>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024d0:	4610      	mov	r0, r2
 80024d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d4:	e00e      	b.n	80024f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f994 	bl	8002804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024dc:	e00a      	b.n	80024f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f990 	bl	8002804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e4:	e006      	b.n	80024f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f98c 	bl	8002804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80024f2:	e175      	b.n	80027e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f4:	bf00      	nop
    return;
 80024f6:	e173      	b.n	80027e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	f040 814f 	bne.w	80027a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8148 	beq.w	80027a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8141 	beq.w	80027a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800253e:	2b40      	cmp	r3, #64	@ 0x40
 8002540:	f040 80b6 	bne.w	80026b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002550:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 8145 	beq.w	80027e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800255e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002562:	429a      	cmp	r2, r3
 8002564:	f080 813e 	bcs.w	80027e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800256e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800257a:	f000 8088 	beq.w	800268e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	330c      	adds	r3, #12
 8002584:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002588:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800258c:	e853 3f00 	ldrex	r3, [r3]
 8002590:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002594:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800259c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	330c      	adds	r3, #12
 80025a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80025aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80025b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80025ba:	e841 2300 	strex	r3, r2, [r1]
 80025be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80025c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1d9      	bne.n	800257e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3314      	adds	r3, #20
 80025d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80025da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	3314      	adds	r3, #20
 80025ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80025ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80025f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80025f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80025fa:	e841 2300 	strex	r3, r2, [r1]
 80025fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002600:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1e1      	bne.n	80025ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3314      	adds	r3, #20
 800260c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002610:	e853 3f00 	ldrex	r3, [r3]
 8002614:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800261c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3314      	adds	r3, #20
 8002626:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800262a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800262c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002630:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002632:	e841 2300 	strex	r3, r2, [r1]
 8002636:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002638:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1e3      	bne.n	8002606 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	330c      	adds	r3, #12
 8002652:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002656:	e853 3f00 	ldrex	r3, [r3]
 800265a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800265c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800265e:	f023 0310 	bic.w	r3, r3, #16
 8002662:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	330c      	adds	r3, #12
 800266c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002670:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002672:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002674:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002676:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002678:	e841 2300 	strex	r3, r2, [r1]
 800267c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800267e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e3      	bne.n	800264c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe feb0 	bl	80013ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2202      	movs	r2, #2
 8002692:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800269c:	b29b      	uxth	r3, r3
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	4619      	mov	r1, r3
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f8b7 	bl	8002818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026aa:	e09b      	b.n	80027e4 <HAL_UART_IRQHandler+0x518>
 80026ac:	08002a1d 	.word	0x08002a1d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 808e 	beq.w	80027e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80026cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8089 	beq.w	80027e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	330c      	adds	r3, #12
 80026dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e0:	e853 3f00 	ldrex	r3, [r3]
 80026e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80026e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80026fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80026fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002700:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002702:	e841 2300 	strex	r3, r2, [r1]
 8002706:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1e3      	bne.n	80026d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3314      	adds	r3, #20
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	e853 3f00 	ldrex	r3, [r3]
 800271c:	623b      	str	r3, [r7, #32]
   return(result);
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3314      	adds	r3, #20
 800272e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002732:	633a      	str	r2, [r7, #48]	@ 0x30
 8002734:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002736:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800273a:	e841 2300 	strex	r3, r2, [r1]
 800273e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1e3      	bne.n	800270e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	330c      	adds	r3, #12
 800275a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	e853 3f00 	ldrex	r3, [r3]
 8002762:	60fb      	str	r3, [r7, #12]
   return(result);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f023 0310 	bic.w	r3, r3, #16
 800276a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002778:	61fa      	str	r2, [r7, #28]
 800277a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277c:	69b9      	ldr	r1, [r7, #24]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	e841 2300 	strex	r3, r2, [r1]
 8002784:	617b      	str	r3, [r7, #20]
   return(result);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e3      	bne.n	8002754 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002792:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002796:	4619      	mov	r1, r3
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f83d 	bl	8002818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800279e:	e023      	b.n	80027e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d009      	beq.n	80027c0 <HAL_UART_IRQHandler+0x4f4>
 80027ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f943 	bl	8002a44 <UART_Transmit_IT>
    return;
 80027be:	e014      	b.n	80027ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00e      	beq.n	80027ea <HAL_UART_IRQHandler+0x51e>
 80027cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f983 	bl	8002ae4 <UART_EndTransmit_IT>
    return;
 80027de:	e004      	b.n	80027ea <HAL_UART_IRQHandler+0x51e>
    return;
 80027e0:	bf00      	nop
 80027e2:	e002      	b.n	80027ea <HAL_UART_IRQHandler+0x51e>
      return;
 80027e4:	bf00      	nop
 80027e6:	e000      	b.n	80027ea <HAL_UART_IRQHandler+0x51e>
      return;
 80027e8:	bf00      	nop
  }
}
 80027ea:	37e8      	adds	r7, #232	@ 0xe8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002840:	e03b      	b.n	80028ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d037      	beq.n	80028ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284a:	f7fe fcb3 	bl	80011b4 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	6a3a      	ldr	r2, [r7, #32]
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <UART_WaitOnFlagUntilTimeout+0x30>
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e03a      	b.n	80028da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d023      	beq.n	80028ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b80      	cmp	r3, #128	@ 0x80
 8002876:	d020      	beq.n	80028ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b40      	cmp	r3, #64	@ 0x40
 800287c:	d01d      	beq.n	80028ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b08      	cmp	r3, #8
 800288a:	d116      	bne.n	80028ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f857 	bl	8002956 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2208      	movs	r2, #8
 80028ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00f      	b.n	80028da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4013      	ands	r3, r2
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d0b4      	beq.n	8002842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	4613      	mov	r3, r2
 80028ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	88fa      	ldrh	r2, [r7, #6]
 8002900:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2222      	movs	r2, #34	@ 0x22
 800290c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002926:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0220 	orr.w	r2, r2, #32
 8002946:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002956:	b480      	push	{r7}
 8002958:	b095      	sub	sp, #84	@ 0x54
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002968:	e853 3f00 	ldrex	r3, [r3]
 800296c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002970:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002974:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800297e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002980:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002984:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800298c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e5      	bne.n	800295e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	e853 3f00 	ldrex	r3, [r3]
 80029a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3314      	adds	r3, #20
 80029b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029ba:	e841 2300 	strex	r3, r2, [r1]
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1e5      	bne.n	8002992 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d119      	bne.n	8002a02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	330c      	adds	r3, #12
 80029d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	e853 3f00 	ldrex	r3, [r3]
 80029dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f023 0310 	bic.w	r3, r3, #16
 80029e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	330c      	adds	r3, #12
 80029ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029ee:	61ba      	str	r2, [r7, #24]
 80029f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f2:	6979      	ldr	r1, [r7, #20]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	e841 2300 	strex	r3, r2, [r1]
 80029fa:	613b      	str	r3, [r7, #16]
   return(result);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1e5      	bne.n	80029ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a10:	bf00      	nop
 8002a12:	3754      	adds	r7, #84	@ 0x54
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f7ff fee4 	bl	8002804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b21      	cmp	r3, #33	@ 0x21
 8002a56:	d13e      	bne.n	8002ad6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a60:	d114      	bne.n	8002a8c <UART_Transmit_IT+0x48>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d110      	bne.n	8002a8c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	1c9a      	adds	r2, r3, #2
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	621a      	str	r2, [r3, #32]
 8002a8a:	e008      	b.n	8002a9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	1c59      	adds	r1, r3, #1
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6211      	str	r1, [r2, #32]
 8002a96:	781a      	ldrb	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10f      	bne.n	8002ad2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ac0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ad0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002afa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff fe73 	bl	80027f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08c      	sub	sp, #48	@ 0x30
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b22      	cmp	r3, #34	@ 0x22
 8002b26:	f040 80ae 	bne.w	8002c86 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b32:	d117      	bne.n	8002b64 <UART_Receive_IT+0x50>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d113      	bne.n	8002b64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b44:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5c:	1c9a      	adds	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b62:	e026      	b.n	8002bb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b76:	d007      	beq.n	8002b88 <UART_Receive_IT+0x74>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <UART_Receive_IT+0x82>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e008      	b.n	8002ba8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d15d      	bne.n	8002c82 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0220 	bic.w	r2, r2, #32
 8002bd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002be4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d135      	bne.n	8002c78 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	330c      	adds	r3, #12
 8002c18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	e853 3f00 	ldrex	r3, [r3]
 8002c20:	613b      	str	r3, [r7, #16]
   return(result);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f023 0310 	bic.w	r3, r3, #16
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	330c      	adds	r3, #12
 8002c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c32:	623a      	str	r2, [r7, #32]
 8002c34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c36:	69f9      	ldr	r1, [r7, #28]
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	e841 2300 	strex	r3, r2, [r1]
 8002c3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1e5      	bne.n	8002c12 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d10a      	bne.n	8002c6a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff fdd1 	bl	8002818 <HAL_UARTEx_RxEventCallback>
 8002c76:	e002      	b.n	8002c7e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7fe f9a7 	bl	8000fcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e002      	b.n	8002c88 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e000      	b.n	8002c88 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c86:	2302      	movs	r3, #2
  }
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3730      	adds	r7, #48	@ 0x30
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c94:	b0c0      	sub	sp, #256	@ 0x100
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cac:	68d9      	ldr	r1, [r3, #12]
 8002cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	ea40 0301 	orr.w	r3, r0, r1
 8002cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ce8:	f021 010c 	bic.w	r1, r1, #12
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0a:	6999      	ldr	r1, [r3, #24]
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	ea40 0301 	orr.w	r3, r0, r1
 8002d16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b8f      	ldr	r3, [pc, #572]	@ (8002f5c <UART_SetConfig+0x2cc>)
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d005      	beq.n	8002d30 <UART_SetConfig+0xa0>
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4b8d      	ldr	r3, [pc, #564]	@ (8002f60 <UART_SetConfig+0x2d0>)
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d104      	bne.n	8002d3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d30:	f7ff f9b8 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8002d34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d38:	e003      	b.n	8002d42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d3a:	f7ff f99f 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 8002d3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d4c:	f040 810c 	bne.w	8002f68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d54:	2200      	movs	r2, #0
 8002d56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d62:	4622      	mov	r2, r4
 8002d64:	462b      	mov	r3, r5
 8002d66:	1891      	adds	r1, r2, r2
 8002d68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d6a:	415b      	adcs	r3, r3
 8002d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d72:	4621      	mov	r1, r4
 8002d74:	eb12 0801 	adds.w	r8, r2, r1
 8002d78:	4629      	mov	r1, r5
 8002d7a:	eb43 0901 	adc.w	r9, r3, r1
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d92:	4690      	mov	r8, r2
 8002d94:	4699      	mov	r9, r3
 8002d96:	4623      	mov	r3, r4
 8002d98:	eb18 0303 	adds.w	r3, r8, r3
 8002d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002da0:	462b      	mov	r3, r5
 8002da2:	eb49 0303 	adc.w	r3, r9, r3
 8002da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002db6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	18db      	adds	r3, r3, r3
 8002dc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	eb42 0303 	adc.w	r3, r2, r3
 8002dca:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002dd4:	f7fd fa54 	bl	8000280 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4b61      	ldr	r3, [pc, #388]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002dde:	fba3 2302 	umull	r2, r3, r3, r2
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	011c      	lsls	r4, r3, #4
 8002de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002df0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002df4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002df8:	4642      	mov	r2, r8
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	1891      	adds	r1, r2, r2
 8002dfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e00:	415b      	adcs	r3, r3
 8002e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e08:	4641      	mov	r1, r8
 8002e0a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e0e:	4649      	mov	r1, r9
 8002e10:	eb43 0b01 	adc.w	fp, r3, r1
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e28:	4692      	mov	sl, r2
 8002e2a:	469b      	mov	fp, r3
 8002e2c:	4643      	mov	r3, r8
 8002e2e:	eb1a 0303 	adds.w	r3, sl, r3
 8002e32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e36:	464b      	mov	r3, r9
 8002e38:	eb4b 0303 	adc.w	r3, fp, r3
 8002e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e54:	460b      	mov	r3, r1
 8002e56:	18db      	adds	r3, r3, r3
 8002e58:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	eb42 0303 	adc.w	r3, r2, r3
 8002e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e6a:	f7fd fa09 	bl	8000280 <__aeabi_uldivmod>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	4b3b      	ldr	r3, [pc, #236]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002e76:	fba3 2301 	umull	r2, r3, r3, r1
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2264      	movs	r2, #100	@ 0x64
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	1acb      	subs	r3, r1, r3
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e8a:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e98:	441c      	add	r4, r3
 8002e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ea4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	1891      	adds	r1, r2, r2
 8002eb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002eb4:	415b      	adcs	r3, r3
 8002eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	1851      	adds	r1, r2, r1
 8002ec0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	414b      	adcs	r3, r1
 8002ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	00cb      	lsls	r3, r1, #3
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ede:	4651      	mov	r1, sl
 8002ee0:	00ca      	lsls	r2, r1, #3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4642      	mov	r2, r8
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	460a      	mov	r2, r1
 8002ef4:	eb42 0303 	adc.w	r3, r2, r3
 8002ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f10:	460b      	mov	r3, r1
 8002f12:	18db      	adds	r3, r3, r3
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f16:	4613      	mov	r3, r2
 8002f18:	eb42 0303 	adc.w	r3, r2, r3
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f26:	f7fd f9ab 	bl	8000280 <__aeabi_uldivmod>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002f30:	fba3 1302 	umull	r1, r3, r3, r2
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	2164      	movs	r1, #100	@ 0x64
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	3332      	adds	r3, #50	@ 0x32
 8002f42:	4a08      	ldr	r2, [pc, #32]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	f003 0207 	and.w	r2, r3, #7
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4422      	add	r2, r4
 8002f56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f58:	e106      	b.n	8003168 <UART_SetConfig+0x4d8>
 8002f5a:	bf00      	nop
 8002f5c:	40011000 	.word	0x40011000
 8002f60:	40011400 	.word	0x40011400
 8002f64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f7a:	4642      	mov	r2, r8
 8002f7c:	464b      	mov	r3, r9
 8002f7e:	1891      	adds	r1, r2, r2
 8002f80:	6239      	str	r1, [r7, #32]
 8002f82:	415b      	adcs	r3, r3
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f8a:	4641      	mov	r1, r8
 8002f8c:	1854      	adds	r4, r2, r1
 8002f8e:	4649      	mov	r1, r9
 8002f90:	eb43 0501 	adc.w	r5, r3, r1
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	00eb      	lsls	r3, r5, #3
 8002f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa2:	00e2      	lsls	r2, r4, #3
 8002fa4:	4614      	mov	r4, r2
 8002fa6:	461d      	mov	r5, r3
 8002fa8:	4643      	mov	r3, r8
 8002faa:	18e3      	adds	r3, r4, r3
 8002fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fb0:	464b      	mov	r3, r9
 8002fb2:	eb45 0303 	adc.w	r3, r5, r3
 8002fb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	008b      	lsls	r3, r1, #2
 8002fda:	4621      	mov	r1, r4
 8002fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	008a      	lsls	r2, r1, #2
 8002fe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fe8:	f7fd f94a 	bl	8000280 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4b60      	ldr	r3, [pc, #384]	@ (8003174 <UART_SetConfig+0x4e4>)
 8002ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	011c      	lsls	r4, r3, #4
 8002ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003004:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800300c:	4642      	mov	r2, r8
 800300e:	464b      	mov	r3, r9
 8003010:	1891      	adds	r1, r2, r2
 8003012:	61b9      	str	r1, [r7, #24]
 8003014:	415b      	adcs	r3, r3
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800301c:	4641      	mov	r1, r8
 800301e:	1851      	adds	r1, r2, r1
 8003020:	6139      	str	r1, [r7, #16]
 8003022:	4649      	mov	r1, r9
 8003024:	414b      	adcs	r3, r1
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003034:	4659      	mov	r1, fp
 8003036:	00cb      	lsls	r3, r1, #3
 8003038:	4651      	mov	r1, sl
 800303a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303e:	4651      	mov	r1, sl
 8003040:	00ca      	lsls	r2, r1, #3
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	4603      	mov	r3, r0
 8003048:	4642      	mov	r2, r8
 800304a:	189b      	adds	r3, r3, r2
 800304c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003050:	464b      	mov	r3, r9
 8003052:	460a      	mov	r2, r1
 8003054:	eb42 0303 	adc.w	r3, r2, r3
 8003058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003066:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003074:	4649      	mov	r1, r9
 8003076:	008b      	lsls	r3, r1, #2
 8003078:	4641      	mov	r1, r8
 800307a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800307e:	4641      	mov	r1, r8
 8003080:	008a      	lsls	r2, r1, #2
 8003082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003086:	f7fd f8fb 	bl	8000280 <__aeabi_uldivmod>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4611      	mov	r1, r2
 8003090:	4b38      	ldr	r3, [pc, #224]	@ (8003174 <UART_SetConfig+0x4e4>)
 8003092:	fba3 2301 	umull	r2, r3, r3, r1
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2264      	movs	r2, #100	@ 0x64
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	1acb      	subs	r3, r1, r3
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	3332      	adds	r3, #50	@ 0x32
 80030a4:	4a33      	ldr	r2, [pc, #204]	@ (8003174 <UART_SetConfig+0x4e4>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030b0:	441c      	add	r4, r3
 80030b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b6:	2200      	movs	r2, #0
 80030b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80030ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80030bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030c0:	4642      	mov	r2, r8
 80030c2:	464b      	mov	r3, r9
 80030c4:	1891      	adds	r1, r2, r2
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	415b      	adcs	r3, r3
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030d0:	4641      	mov	r1, r8
 80030d2:	1851      	adds	r1, r2, r1
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	4649      	mov	r1, r9
 80030d8:	414b      	adcs	r3, r1
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030e8:	4659      	mov	r1, fp
 80030ea:	00cb      	lsls	r3, r1, #3
 80030ec:	4651      	mov	r1, sl
 80030ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f2:	4651      	mov	r1, sl
 80030f4:	00ca      	lsls	r2, r1, #3
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	4642      	mov	r2, r8
 80030fe:	189b      	adds	r3, r3, r2
 8003100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003102:	464b      	mov	r3, r9
 8003104:	460a      	mov	r2, r1
 8003106:	eb42 0303 	adc.w	r3, r2, r3
 800310a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	663b      	str	r3, [r7, #96]	@ 0x60
 8003116:	667a      	str	r2, [r7, #100]	@ 0x64
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003124:	4649      	mov	r1, r9
 8003126:	008b      	lsls	r3, r1, #2
 8003128:	4641      	mov	r1, r8
 800312a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800312e:	4641      	mov	r1, r8
 8003130:	008a      	lsls	r2, r1, #2
 8003132:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003136:	f7fd f8a3 	bl	8000280 <__aeabi_uldivmod>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4b0d      	ldr	r3, [pc, #52]	@ (8003174 <UART_SetConfig+0x4e4>)
 8003140:	fba3 1302 	umull	r1, r3, r3, r2
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	2164      	movs	r1, #100	@ 0x64
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	3332      	adds	r3, #50	@ 0x32
 8003152:	4a08      	ldr	r2, [pc, #32]	@ (8003174 <UART_SetConfig+0x4e4>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4422      	add	r2, r4
 8003166:	609a      	str	r2, [r3, #8]
}
 8003168:	bf00      	nop
 800316a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800316e:	46bd      	mov	sp, r7
 8003170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003174:	51eb851f 	.word	0x51eb851f

08003178 <__itoa>:
 8003178:	1e93      	subs	r3, r2, #2
 800317a:	2b22      	cmp	r3, #34	@ 0x22
 800317c:	b510      	push	{r4, lr}
 800317e:	460c      	mov	r4, r1
 8003180:	d904      	bls.n	800318c <__itoa+0x14>
 8003182:	2300      	movs	r3, #0
 8003184:	700b      	strb	r3, [r1, #0]
 8003186:	461c      	mov	r4, r3
 8003188:	4620      	mov	r0, r4
 800318a:	bd10      	pop	{r4, pc}
 800318c:	2a0a      	cmp	r2, #10
 800318e:	d109      	bne.n	80031a4 <__itoa+0x2c>
 8003190:	2800      	cmp	r0, #0
 8003192:	da07      	bge.n	80031a4 <__itoa+0x2c>
 8003194:	232d      	movs	r3, #45	@ 0x2d
 8003196:	700b      	strb	r3, [r1, #0]
 8003198:	4240      	negs	r0, r0
 800319a:	2101      	movs	r1, #1
 800319c:	4421      	add	r1, r4
 800319e:	f000 f8c3 	bl	8003328 <__utoa>
 80031a2:	e7f1      	b.n	8003188 <__itoa+0x10>
 80031a4:	2100      	movs	r1, #0
 80031a6:	e7f9      	b.n	800319c <__itoa+0x24>

080031a8 <itoa>:
 80031a8:	f7ff bfe6 	b.w	8003178 <__itoa>

080031ac <malloc>:
 80031ac:	4b02      	ldr	r3, [pc, #8]	@ (80031b8 <malloc+0xc>)
 80031ae:	4601      	mov	r1, r0
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	f000 b82d 	b.w	8003210 <_malloc_r>
 80031b6:	bf00      	nop
 80031b8:	20000018 	.word	0x20000018

080031bc <free>:
 80031bc:	4b02      	ldr	r3, [pc, #8]	@ (80031c8 <free+0xc>)
 80031be:	4601      	mov	r1, r0
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	f000 bb89 	b.w	80038d8 <_free_r>
 80031c6:	bf00      	nop
 80031c8:	20000018 	.word	0x20000018

080031cc <sbrk_aligned>:
 80031cc:	b570      	push	{r4, r5, r6, lr}
 80031ce:	4e0f      	ldr	r6, [pc, #60]	@ (800320c <sbrk_aligned+0x40>)
 80031d0:	460c      	mov	r4, r1
 80031d2:	6831      	ldr	r1, [r6, #0]
 80031d4:	4605      	mov	r5, r0
 80031d6:	b911      	cbnz	r1, 80031de <sbrk_aligned+0x12>
 80031d8:	f000 fb2e 	bl	8003838 <_sbrk_r>
 80031dc:	6030      	str	r0, [r6, #0]
 80031de:	4621      	mov	r1, r4
 80031e0:	4628      	mov	r0, r5
 80031e2:	f000 fb29 	bl	8003838 <_sbrk_r>
 80031e6:	1c43      	adds	r3, r0, #1
 80031e8:	d103      	bne.n	80031f2 <sbrk_aligned+0x26>
 80031ea:	f04f 34ff 	mov.w	r4, #4294967295
 80031ee:	4620      	mov	r0, r4
 80031f0:	bd70      	pop	{r4, r5, r6, pc}
 80031f2:	1cc4      	adds	r4, r0, #3
 80031f4:	f024 0403 	bic.w	r4, r4, #3
 80031f8:	42a0      	cmp	r0, r4
 80031fa:	d0f8      	beq.n	80031ee <sbrk_aligned+0x22>
 80031fc:	1a21      	subs	r1, r4, r0
 80031fe:	4628      	mov	r0, r5
 8003200:	f000 fb1a 	bl	8003838 <_sbrk_r>
 8003204:	3001      	adds	r0, #1
 8003206:	d1f2      	bne.n	80031ee <sbrk_aligned+0x22>
 8003208:	e7ef      	b.n	80031ea <sbrk_aligned+0x1e>
 800320a:	bf00      	nop
 800320c:	200001e4 	.word	0x200001e4

08003210 <_malloc_r>:
 8003210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003214:	1ccd      	adds	r5, r1, #3
 8003216:	f025 0503 	bic.w	r5, r5, #3
 800321a:	3508      	adds	r5, #8
 800321c:	2d0c      	cmp	r5, #12
 800321e:	bf38      	it	cc
 8003220:	250c      	movcc	r5, #12
 8003222:	2d00      	cmp	r5, #0
 8003224:	4606      	mov	r6, r0
 8003226:	db01      	blt.n	800322c <_malloc_r+0x1c>
 8003228:	42a9      	cmp	r1, r5
 800322a:	d904      	bls.n	8003236 <_malloc_r+0x26>
 800322c:	230c      	movs	r3, #12
 800322e:	6033      	str	r3, [r6, #0]
 8003230:	2000      	movs	r0, #0
 8003232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003236:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800330c <_malloc_r+0xfc>
 800323a:	f000 f869 	bl	8003310 <__malloc_lock>
 800323e:	f8d8 3000 	ldr.w	r3, [r8]
 8003242:	461c      	mov	r4, r3
 8003244:	bb44      	cbnz	r4, 8003298 <_malloc_r+0x88>
 8003246:	4629      	mov	r1, r5
 8003248:	4630      	mov	r0, r6
 800324a:	f7ff ffbf 	bl	80031cc <sbrk_aligned>
 800324e:	1c43      	adds	r3, r0, #1
 8003250:	4604      	mov	r4, r0
 8003252:	d158      	bne.n	8003306 <_malloc_r+0xf6>
 8003254:	f8d8 4000 	ldr.w	r4, [r8]
 8003258:	4627      	mov	r7, r4
 800325a:	2f00      	cmp	r7, #0
 800325c:	d143      	bne.n	80032e6 <_malloc_r+0xd6>
 800325e:	2c00      	cmp	r4, #0
 8003260:	d04b      	beq.n	80032fa <_malloc_r+0xea>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	4639      	mov	r1, r7
 8003266:	4630      	mov	r0, r6
 8003268:	eb04 0903 	add.w	r9, r4, r3
 800326c:	f000 fae4 	bl	8003838 <_sbrk_r>
 8003270:	4581      	cmp	r9, r0
 8003272:	d142      	bne.n	80032fa <_malloc_r+0xea>
 8003274:	6821      	ldr	r1, [r4, #0]
 8003276:	1a6d      	subs	r5, r5, r1
 8003278:	4629      	mov	r1, r5
 800327a:	4630      	mov	r0, r6
 800327c:	f7ff ffa6 	bl	80031cc <sbrk_aligned>
 8003280:	3001      	adds	r0, #1
 8003282:	d03a      	beq.n	80032fa <_malloc_r+0xea>
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	442b      	add	r3, r5
 8003288:	6023      	str	r3, [r4, #0]
 800328a:	f8d8 3000 	ldr.w	r3, [r8]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	bb62      	cbnz	r2, 80032ec <_malloc_r+0xdc>
 8003292:	f8c8 7000 	str.w	r7, [r8]
 8003296:	e00f      	b.n	80032b8 <_malloc_r+0xa8>
 8003298:	6822      	ldr	r2, [r4, #0]
 800329a:	1b52      	subs	r2, r2, r5
 800329c:	d420      	bmi.n	80032e0 <_malloc_r+0xd0>
 800329e:	2a0b      	cmp	r2, #11
 80032a0:	d917      	bls.n	80032d2 <_malloc_r+0xc2>
 80032a2:	1961      	adds	r1, r4, r5
 80032a4:	42a3      	cmp	r3, r4
 80032a6:	6025      	str	r5, [r4, #0]
 80032a8:	bf18      	it	ne
 80032aa:	6059      	strne	r1, [r3, #4]
 80032ac:	6863      	ldr	r3, [r4, #4]
 80032ae:	bf08      	it	eq
 80032b0:	f8c8 1000 	streq.w	r1, [r8]
 80032b4:	5162      	str	r2, [r4, r5]
 80032b6:	604b      	str	r3, [r1, #4]
 80032b8:	4630      	mov	r0, r6
 80032ba:	f000 f82f 	bl	800331c <__malloc_unlock>
 80032be:	f104 000b 	add.w	r0, r4, #11
 80032c2:	1d23      	adds	r3, r4, #4
 80032c4:	f020 0007 	bic.w	r0, r0, #7
 80032c8:	1ac2      	subs	r2, r0, r3
 80032ca:	bf1c      	itt	ne
 80032cc:	1a1b      	subne	r3, r3, r0
 80032ce:	50a3      	strne	r3, [r4, r2]
 80032d0:	e7af      	b.n	8003232 <_malloc_r+0x22>
 80032d2:	6862      	ldr	r2, [r4, #4]
 80032d4:	42a3      	cmp	r3, r4
 80032d6:	bf0c      	ite	eq
 80032d8:	f8c8 2000 	streq.w	r2, [r8]
 80032dc:	605a      	strne	r2, [r3, #4]
 80032de:	e7eb      	b.n	80032b8 <_malloc_r+0xa8>
 80032e0:	4623      	mov	r3, r4
 80032e2:	6864      	ldr	r4, [r4, #4]
 80032e4:	e7ae      	b.n	8003244 <_malloc_r+0x34>
 80032e6:	463c      	mov	r4, r7
 80032e8:	687f      	ldr	r7, [r7, #4]
 80032ea:	e7b6      	b.n	800325a <_malloc_r+0x4a>
 80032ec:	461a      	mov	r2, r3
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	42a3      	cmp	r3, r4
 80032f2:	d1fb      	bne.n	80032ec <_malloc_r+0xdc>
 80032f4:	2300      	movs	r3, #0
 80032f6:	6053      	str	r3, [r2, #4]
 80032f8:	e7de      	b.n	80032b8 <_malloc_r+0xa8>
 80032fa:	230c      	movs	r3, #12
 80032fc:	6033      	str	r3, [r6, #0]
 80032fe:	4630      	mov	r0, r6
 8003300:	f000 f80c 	bl	800331c <__malloc_unlock>
 8003304:	e794      	b.n	8003230 <_malloc_r+0x20>
 8003306:	6005      	str	r5, [r0, #0]
 8003308:	e7d6      	b.n	80032b8 <_malloc_r+0xa8>
 800330a:	bf00      	nop
 800330c:	200001e8 	.word	0x200001e8

08003310 <__malloc_lock>:
 8003310:	4801      	ldr	r0, [pc, #4]	@ (8003318 <__malloc_lock+0x8>)
 8003312:	f000 bade 	b.w	80038d2 <__retarget_lock_acquire_recursive>
 8003316:	bf00      	nop
 8003318:	2000032c 	.word	0x2000032c

0800331c <__malloc_unlock>:
 800331c:	4801      	ldr	r0, [pc, #4]	@ (8003324 <__malloc_unlock+0x8>)
 800331e:	f000 bad9 	b.w	80038d4 <__retarget_lock_release_recursive>
 8003322:	bf00      	nop
 8003324:	2000032c 	.word	0x2000032c

08003328 <__utoa>:
 8003328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332a:	4c1f      	ldr	r4, [pc, #124]	@ (80033a8 <__utoa+0x80>)
 800332c:	b08b      	sub	sp, #44	@ 0x2c
 800332e:	4605      	mov	r5, r0
 8003330:	460b      	mov	r3, r1
 8003332:	466e      	mov	r6, sp
 8003334:	f104 0c20 	add.w	ip, r4, #32
 8003338:	6820      	ldr	r0, [r4, #0]
 800333a:	6861      	ldr	r1, [r4, #4]
 800333c:	4637      	mov	r7, r6
 800333e:	c703      	stmia	r7!, {r0, r1}
 8003340:	3408      	adds	r4, #8
 8003342:	4564      	cmp	r4, ip
 8003344:	463e      	mov	r6, r7
 8003346:	d1f7      	bne.n	8003338 <__utoa+0x10>
 8003348:	7921      	ldrb	r1, [r4, #4]
 800334a:	7139      	strb	r1, [r7, #4]
 800334c:	1e91      	subs	r1, r2, #2
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	6038      	str	r0, [r7, #0]
 8003352:	2922      	cmp	r1, #34	@ 0x22
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	d904      	bls.n	8003364 <__utoa+0x3c>
 800335a:	7019      	strb	r1, [r3, #0]
 800335c:	460b      	mov	r3, r1
 800335e:	4618      	mov	r0, r3
 8003360:	b00b      	add	sp, #44	@ 0x2c
 8003362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003364:	1e58      	subs	r0, r3, #1
 8003366:	4684      	mov	ip, r0
 8003368:	fbb5 f7f2 	udiv	r7, r5, r2
 800336c:	fb02 5617 	mls	r6, r2, r7, r5
 8003370:	3628      	adds	r6, #40	@ 0x28
 8003372:	446e      	add	r6, sp
 8003374:	460c      	mov	r4, r1
 8003376:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800337a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800337e:	462e      	mov	r6, r5
 8003380:	42b2      	cmp	r2, r6
 8003382:	f101 0101 	add.w	r1, r1, #1
 8003386:	463d      	mov	r5, r7
 8003388:	d9ee      	bls.n	8003368 <__utoa+0x40>
 800338a:	2200      	movs	r2, #0
 800338c:	545a      	strb	r2, [r3, r1]
 800338e:	1919      	adds	r1, r3, r4
 8003390:	1aa5      	subs	r5, r4, r2
 8003392:	42aa      	cmp	r2, r5
 8003394:	dae3      	bge.n	800335e <__utoa+0x36>
 8003396:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800339a:	780e      	ldrb	r6, [r1, #0]
 800339c:	7006      	strb	r6, [r0, #0]
 800339e:	3201      	adds	r2, #1
 80033a0:	f801 5901 	strb.w	r5, [r1], #-1
 80033a4:	e7f4      	b.n	8003390 <__utoa+0x68>
 80033a6:	bf00      	nop
 80033a8:	080041ec 	.word	0x080041ec

080033ac <std>:
 80033ac:	2300      	movs	r3, #0
 80033ae:	b510      	push	{r4, lr}
 80033b0:	4604      	mov	r4, r0
 80033b2:	e9c0 3300 	strd	r3, r3, [r0]
 80033b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033ba:	6083      	str	r3, [r0, #8]
 80033bc:	8181      	strh	r1, [r0, #12]
 80033be:	6643      	str	r3, [r0, #100]	@ 0x64
 80033c0:	81c2      	strh	r2, [r0, #14]
 80033c2:	6183      	str	r3, [r0, #24]
 80033c4:	4619      	mov	r1, r3
 80033c6:	2208      	movs	r2, #8
 80033c8:	305c      	adds	r0, #92	@ 0x5c
 80033ca:	f000 f9f9 	bl	80037c0 <memset>
 80033ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003404 <std+0x58>)
 80033d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80033d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003408 <std+0x5c>)
 80033d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80033d6:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <std+0x60>)
 80033d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80033da:	4b0d      	ldr	r3, [pc, #52]	@ (8003410 <std+0x64>)
 80033dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80033de:	4b0d      	ldr	r3, [pc, #52]	@ (8003414 <std+0x68>)
 80033e0:	6224      	str	r4, [r4, #32]
 80033e2:	429c      	cmp	r4, r3
 80033e4:	d006      	beq.n	80033f4 <std+0x48>
 80033e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80033ea:	4294      	cmp	r4, r2
 80033ec:	d002      	beq.n	80033f4 <std+0x48>
 80033ee:	33d0      	adds	r3, #208	@ 0xd0
 80033f0:	429c      	cmp	r4, r3
 80033f2:	d105      	bne.n	8003400 <std+0x54>
 80033f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80033f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033fc:	f000 ba68 	b.w	80038d0 <__retarget_lock_init_recursive>
 8003400:	bd10      	pop	{r4, pc}
 8003402:	bf00      	nop
 8003404:	08003611 	.word	0x08003611
 8003408:	08003633 	.word	0x08003633
 800340c:	0800366b 	.word	0x0800366b
 8003410:	0800368f 	.word	0x0800368f
 8003414:	200001ec 	.word	0x200001ec

08003418 <stdio_exit_handler>:
 8003418:	4a02      	ldr	r2, [pc, #8]	@ (8003424 <stdio_exit_handler+0xc>)
 800341a:	4903      	ldr	r1, [pc, #12]	@ (8003428 <stdio_exit_handler+0x10>)
 800341c:	4803      	ldr	r0, [pc, #12]	@ (800342c <stdio_exit_handler+0x14>)
 800341e:	f000 b869 	b.w	80034f4 <_fwalk_sglue>
 8003422:	bf00      	nop
 8003424:	2000000c 	.word	0x2000000c
 8003428:	08004015 	.word	0x08004015
 800342c:	2000001c 	.word	0x2000001c

08003430 <cleanup_stdio>:
 8003430:	6841      	ldr	r1, [r0, #4]
 8003432:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <cleanup_stdio+0x34>)
 8003434:	4299      	cmp	r1, r3
 8003436:	b510      	push	{r4, lr}
 8003438:	4604      	mov	r4, r0
 800343a:	d001      	beq.n	8003440 <cleanup_stdio+0x10>
 800343c:	f000 fdea 	bl	8004014 <_fflush_r>
 8003440:	68a1      	ldr	r1, [r4, #8]
 8003442:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <cleanup_stdio+0x38>)
 8003444:	4299      	cmp	r1, r3
 8003446:	d002      	beq.n	800344e <cleanup_stdio+0x1e>
 8003448:	4620      	mov	r0, r4
 800344a:	f000 fde3 	bl	8004014 <_fflush_r>
 800344e:	68e1      	ldr	r1, [r4, #12]
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <cleanup_stdio+0x3c>)
 8003452:	4299      	cmp	r1, r3
 8003454:	d004      	beq.n	8003460 <cleanup_stdio+0x30>
 8003456:	4620      	mov	r0, r4
 8003458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800345c:	f000 bdda 	b.w	8004014 <_fflush_r>
 8003460:	bd10      	pop	{r4, pc}
 8003462:	bf00      	nop
 8003464:	200001ec 	.word	0x200001ec
 8003468:	20000254 	.word	0x20000254
 800346c:	200002bc 	.word	0x200002bc

08003470 <global_stdio_init.part.0>:
 8003470:	b510      	push	{r4, lr}
 8003472:	4b0b      	ldr	r3, [pc, #44]	@ (80034a0 <global_stdio_init.part.0+0x30>)
 8003474:	4c0b      	ldr	r4, [pc, #44]	@ (80034a4 <global_stdio_init.part.0+0x34>)
 8003476:	4a0c      	ldr	r2, [pc, #48]	@ (80034a8 <global_stdio_init.part.0+0x38>)
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	4620      	mov	r0, r4
 800347c:	2200      	movs	r2, #0
 800347e:	2104      	movs	r1, #4
 8003480:	f7ff ff94 	bl	80033ac <std>
 8003484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003488:	2201      	movs	r2, #1
 800348a:	2109      	movs	r1, #9
 800348c:	f7ff ff8e 	bl	80033ac <std>
 8003490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003494:	2202      	movs	r2, #2
 8003496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800349a:	2112      	movs	r1, #18
 800349c:	f7ff bf86 	b.w	80033ac <std>
 80034a0:	20000324 	.word	0x20000324
 80034a4:	200001ec 	.word	0x200001ec
 80034a8:	08003419 	.word	0x08003419

080034ac <__sfp_lock_acquire>:
 80034ac:	4801      	ldr	r0, [pc, #4]	@ (80034b4 <__sfp_lock_acquire+0x8>)
 80034ae:	f000 ba10 	b.w	80038d2 <__retarget_lock_acquire_recursive>
 80034b2:	bf00      	nop
 80034b4:	2000032d 	.word	0x2000032d

080034b8 <__sfp_lock_release>:
 80034b8:	4801      	ldr	r0, [pc, #4]	@ (80034c0 <__sfp_lock_release+0x8>)
 80034ba:	f000 ba0b 	b.w	80038d4 <__retarget_lock_release_recursive>
 80034be:	bf00      	nop
 80034c0:	2000032d 	.word	0x2000032d

080034c4 <__sinit>:
 80034c4:	b510      	push	{r4, lr}
 80034c6:	4604      	mov	r4, r0
 80034c8:	f7ff fff0 	bl	80034ac <__sfp_lock_acquire>
 80034cc:	6a23      	ldr	r3, [r4, #32]
 80034ce:	b11b      	cbz	r3, 80034d8 <__sinit+0x14>
 80034d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034d4:	f7ff bff0 	b.w	80034b8 <__sfp_lock_release>
 80034d8:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <__sinit+0x28>)
 80034da:	6223      	str	r3, [r4, #32]
 80034dc:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <__sinit+0x2c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f5      	bne.n	80034d0 <__sinit+0xc>
 80034e4:	f7ff ffc4 	bl	8003470 <global_stdio_init.part.0>
 80034e8:	e7f2      	b.n	80034d0 <__sinit+0xc>
 80034ea:	bf00      	nop
 80034ec:	08003431 	.word	0x08003431
 80034f0:	20000324 	.word	0x20000324

080034f4 <_fwalk_sglue>:
 80034f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034f8:	4607      	mov	r7, r0
 80034fa:	4688      	mov	r8, r1
 80034fc:	4614      	mov	r4, r2
 80034fe:	2600      	movs	r6, #0
 8003500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003504:	f1b9 0901 	subs.w	r9, r9, #1
 8003508:	d505      	bpl.n	8003516 <_fwalk_sglue+0x22>
 800350a:	6824      	ldr	r4, [r4, #0]
 800350c:	2c00      	cmp	r4, #0
 800350e:	d1f7      	bne.n	8003500 <_fwalk_sglue+0xc>
 8003510:	4630      	mov	r0, r6
 8003512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003516:	89ab      	ldrh	r3, [r5, #12]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d907      	bls.n	800352c <_fwalk_sglue+0x38>
 800351c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003520:	3301      	adds	r3, #1
 8003522:	d003      	beq.n	800352c <_fwalk_sglue+0x38>
 8003524:	4629      	mov	r1, r5
 8003526:	4638      	mov	r0, r7
 8003528:	47c0      	blx	r8
 800352a:	4306      	orrs	r6, r0
 800352c:	3568      	adds	r5, #104	@ 0x68
 800352e:	e7e9      	b.n	8003504 <_fwalk_sglue+0x10>

08003530 <iprintf>:
 8003530:	b40f      	push	{r0, r1, r2, r3}
 8003532:	b507      	push	{r0, r1, r2, lr}
 8003534:	4906      	ldr	r1, [pc, #24]	@ (8003550 <iprintf+0x20>)
 8003536:	ab04      	add	r3, sp, #16
 8003538:	6808      	ldr	r0, [r1, #0]
 800353a:	f853 2b04 	ldr.w	r2, [r3], #4
 800353e:	6881      	ldr	r1, [r0, #8]
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	f000 fa3d 	bl	80039c0 <_vfiprintf_r>
 8003546:	b003      	add	sp, #12
 8003548:	f85d eb04 	ldr.w	lr, [sp], #4
 800354c:	b004      	add	sp, #16
 800354e:	4770      	bx	lr
 8003550:	20000018 	.word	0x20000018

08003554 <_puts_r>:
 8003554:	6a03      	ldr	r3, [r0, #32]
 8003556:	b570      	push	{r4, r5, r6, lr}
 8003558:	6884      	ldr	r4, [r0, #8]
 800355a:	4605      	mov	r5, r0
 800355c:	460e      	mov	r6, r1
 800355e:	b90b      	cbnz	r3, 8003564 <_puts_r+0x10>
 8003560:	f7ff ffb0 	bl	80034c4 <__sinit>
 8003564:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003566:	07db      	lsls	r3, r3, #31
 8003568:	d405      	bmi.n	8003576 <_puts_r+0x22>
 800356a:	89a3      	ldrh	r3, [r4, #12]
 800356c:	0598      	lsls	r0, r3, #22
 800356e:	d402      	bmi.n	8003576 <_puts_r+0x22>
 8003570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003572:	f000 f9ae 	bl	80038d2 <__retarget_lock_acquire_recursive>
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	0719      	lsls	r1, r3, #28
 800357a:	d502      	bpl.n	8003582 <_puts_r+0x2e>
 800357c:	6923      	ldr	r3, [r4, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d135      	bne.n	80035ee <_puts_r+0x9a>
 8003582:	4621      	mov	r1, r4
 8003584:	4628      	mov	r0, r5
 8003586:	f000 f8c5 	bl	8003714 <__swsetup_r>
 800358a:	b380      	cbz	r0, 80035ee <_puts_r+0x9a>
 800358c:	f04f 35ff 	mov.w	r5, #4294967295
 8003590:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003592:	07da      	lsls	r2, r3, #31
 8003594:	d405      	bmi.n	80035a2 <_puts_r+0x4e>
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	059b      	lsls	r3, r3, #22
 800359a:	d402      	bmi.n	80035a2 <_puts_r+0x4e>
 800359c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800359e:	f000 f999 	bl	80038d4 <__retarget_lock_release_recursive>
 80035a2:	4628      	mov	r0, r5
 80035a4:	bd70      	pop	{r4, r5, r6, pc}
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	da04      	bge.n	80035b4 <_puts_r+0x60>
 80035aa:	69a2      	ldr	r2, [r4, #24]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	dc17      	bgt.n	80035e0 <_puts_r+0x8c>
 80035b0:	290a      	cmp	r1, #10
 80035b2:	d015      	beq.n	80035e0 <_puts_r+0x8c>
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	6022      	str	r2, [r4, #0]
 80035ba:	7019      	strb	r1, [r3, #0]
 80035bc:	68a3      	ldr	r3, [r4, #8]
 80035be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035c2:	3b01      	subs	r3, #1
 80035c4:	60a3      	str	r3, [r4, #8]
 80035c6:	2900      	cmp	r1, #0
 80035c8:	d1ed      	bne.n	80035a6 <_puts_r+0x52>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	da11      	bge.n	80035f2 <_puts_r+0x9e>
 80035ce:	4622      	mov	r2, r4
 80035d0:	210a      	movs	r1, #10
 80035d2:	4628      	mov	r0, r5
 80035d4:	f000 f85f 	bl	8003696 <__swbuf_r>
 80035d8:	3001      	adds	r0, #1
 80035da:	d0d7      	beq.n	800358c <_puts_r+0x38>
 80035dc:	250a      	movs	r5, #10
 80035de:	e7d7      	b.n	8003590 <_puts_r+0x3c>
 80035e0:	4622      	mov	r2, r4
 80035e2:	4628      	mov	r0, r5
 80035e4:	f000 f857 	bl	8003696 <__swbuf_r>
 80035e8:	3001      	adds	r0, #1
 80035ea:	d1e7      	bne.n	80035bc <_puts_r+0x68>
 80035ec:	e7ce      	b.n	800358c <_puts_r+0x38>
 80035ee:	3e01      	subs	r6, #1
 80035f0:	e7e4      	b.n	80035bc <_puts_r+0x68>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	6022      	str	r2, [r4, #0]
 80035f8:	220a      	movs	r2, #10
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	e7ee      	b.n	80035dc <_puts_r+0x88>
	...

08003600 <puts>:
 8003600:	4b02      	ldr	r3, [pc, #8]	@ (800360c <puts+0xc>)
 8003602:	4601      	mov	r1, r0
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	f7ff bfa5 	b.w	8003554 <_puts_r>
 800360a:	bf00      	nop
 800360c:	20000018 	.word	0x20000018

08003610 <__sread>:
 8003610:	b510      	push	{r4, lr}
 8003612:	460c      	mov	r4, r1
 8003614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003618:	f000 f8fc 	bl	8003814 <_read_r>
 800361c:	2800      	cmp	r0, #0
 800361e:	bfab      	itete	ge
 8003620:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003622:	89a3      	ldrhlt	r3, [r4, #12]
 8003624:	181b      	addge	r3, r3, r0
 8003626:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800362a:	bfac      	ite	ge
 800362c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800362e:	81a3      	strhlt	r3, [r4, #12]
 8003630:	bd10      	pop	{r4, pc}

08003632 <__swrite>:
 8003632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003636:	461f      	mov	r7, r3
 8003638:	898b      	ldrh	r3, [r1, #12]
 800363a:	05db      	lsls	r3, r3, #23
 800363c:	4605      	mov	r5, r0
 800363e:	460c      	mov	r4, r1
 8003640:	4616      	mov	r6, r2
 8003642:	d505      	bpl.n	8003650 <__swrite+0x1e>
 8003644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003648:	2302      	movs	r3, #2
 800364a:	2200      	movs	r2, #0
 800364c:	f000 f8d0 	bl	80037f0 <_lseek_r>
 8003650:	89a3      	ldrh	r3, [r4, #12]
 8003652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003656:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800365a:	81a3      	strh	r3, [r4, #12]
 800365c:	4632      	mov	r2, r6
 800365e:	463b      	mov	r3, r7
 8003660:	4628      	mov	r0, r5
 8003662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003666:	f000 b8f7 	b.w	8003858 <_write_r>

0800366a <__sseek>:
 800366a:	b510      	push	{r4, lr}
 800366c:	460c      	mov	r4, r1
 800366e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003672:	f000 f8bd 	bl	80037f0 <_lseek_r>
 8003676:	1c43      	adds	r3, r0, #1
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	bf15      	itete	ne
 800367c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800367e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003682:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003686:	81a3      	strheq	r3, [r4, #12]
 8003688:	bf18      	it	ne
 800368a:	81a3      	strhne	r3, [r4, #12]
 800368c:	bd10      	pop	{r4, pc}

0800368e <__sclose>:
 800368e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003692:	f000 b89d 	b.w	80037d0 <_close_r>

08003696 <__swbuf_r>:
 8003696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003698:	460e      	mov	r6, r1
 800369a:	4614      	mov	r4, r2
 800369c:	4605      	mov	r5, r0
 800369e:	b118      	cbz	r0, 80036a8 <__swbuf_r+0x12>
 80036a0:	6a03      	ldr	r3, [r0, #32]
 80036a2:	b90b      	cbnz	r3, 80036a8 <__swbuf_r+0x12>
 80036a4:	f7ff ff0e 	bl	80034c4 <__sinit>
 80036a8:	69a3      	ldr	r3, [r4, #24]
 80036aa:	60a3      	str	r3, [r4, #8]
 80036ac:	89a3      	ldrh	r3, [r4, #12]
 80036ae:	071a      	lsls	r2, r3, #28
 80036b0:	d501      	bpl.n	80036b6 <__swbuf_r+0x20>
 80036b2:	6923      	ldr	r3, [r4, #16]
 80036b4:	b943      	cbnz	r3, 80036c8 <__swbuf_r+0x32>
 80036b6:	4621      	mov	r1, r4
 80036b8:	4628      	mov	r0, r5
 80036ba:	f000 f82b 	bl	8003714 <__swsetup_r>
 80036be:	b118      	cbz	r0, 80036c8 <__swbuf_r+0x32>
 80036c0:	f04f 37ff 	mov.w	r7, #4294967295
 80036c4:	4638      	mov	r0, r7
 80036c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	6922      	ldr	r2, [r4, #16]
 80036cc:	1a98      	subs	r0, r3, r2
 80036ce:	6963      	ldr	r3, [r4, #20]
 80036d0:	b2f6      	uxtb	r6, r6
 80036d2:	4283      	cmp	r3, r0
 80036d4:	4637      	mov	r7, r6
 80036d6:	dc05      	bgt.n	80036e4 <__swbuf_r+0x4e>
 80036d8:	4621      	mov	r1, r4
 80036da:	4628      	mov	r0, r5
 80036dc:	f000 fc9a 	bl	8004014 <_fflush_r>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d1ed      	bne.n	80036c0 <__swbuf_r+0x2a>
 80036e4:	68a3      	ldr	r3, [r4, #8]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	60a3      	str	r3, [r4, #8]
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	6022      	str	r2, [r4, #0]
 80036f0:	701e      	strb	r6, [r3, #0]
 80036f2:	6962      	ldr	r2, [r4, #20]
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d004      	beq.n	8003704 <__swbuf_r+0x6e>
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	07db      	lsls	r3, r3, #31
 80036fe:	d5e1      	bpl.n	80036c4 <__swbuf_r+0x2e>
 8003700:	2e0a      	cmp	r6, #10
 8003702:	d1df      	bne.n	80036c4 <__swbuf_r+0x2e>
 8003704:	4621      	mov	r1, r4
 8003706:	4628      	mov	r0, r5
 8003708:	f000 fc84 	bl	8004014 <_fflush_r>
 800370c:	2800      	cmp	r0, #0
 800370e:	d0d9      	beq.n	80036c4 <__swbuf_r+0x2e>
 8003710:	e7d6      	b.n	80036c0 <__swbuf_r+0x2a>
	...

08003714 <__swsetup_r>:
 8003714:	b538      	push	{r3, r4, r5, lr}
 8003716:	4b29      	ldr	r3, [pc, #164]	@ (80037bc <__swsetup_r+0xa8>)
 8003718:	4605      	mov	r5, r0
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	460c      	mov	r4, r1
 800371e:	b118      	cbz	r0, 8003728 <__swsetup_r+0x14>
 8003720:	6a03      	ldr	r3, [r0, #32]
 8003722:	b90b      	cbnz	r3, 8003728 <__swsetup_r+0x14>
 8003724:	f7ff fece 	bl	80034c4 <__sinit>
 8003728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800372c:	0719      	lsls	r1, r3, #28
 800372e:	d422      	bmi.n	8003776 <__swsetup_r+0x62>
 8003730:	06da      	lsls	r2, r3, #27
 8003732:	d407      	bmi.n	8003744 <__swsetup_r+0x30>
 8003734:	2209      	movs	r2, #9
 8003736:	602a      	str	r2, [r5, #0]
 8003738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800373c:	81a3      	strh	r3, [r4, #12]
 800373e:	f04f 30ff 	mov.w	r0, #4294967295
 8003742:	e033      	b.n	80037ac <__swsetup_r+0x98>
 8003744:	0758      	lsls	r0, r3, #29
 8003746:	d512      	bpl.n	800376e <__swsetup_r+0x5a>
 8003748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800374a:	b141      	cbz	r1, 800375e <__swsetup_r+0x4a>
 800374c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003750:	4299      	cmp	r1, r3
 8003752:	d002      	beq.n	800375a <__swsetup_r+0x46>
 8003754:	4628      	mov	r0, r5
 8003756:	f000 f8bf 	bl	80038d8 <_free_r>
 800375a:	2300      	movs	r3, #0
 800375c:	6363      	str	r3, [r4, #52]	@ 0x34
 800375e:	89a3      	ldrh	r3, [r4, #12]
 8003760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003764:	81a3      	strh	r3, [r4, #12]
 8003766:	2300      	movs	r3, #0
 8003768:	6063      	str	r3, [r4, #4]
 800376a:	6923      	ldr	r3, [r4, #16]
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	89a3      	ldrh	r3, [r4, #12]
 8003770:	f043 0308 	orr.w	r3, r3, #8
 8003774:	81a3      	strh	r3, [r4, #12]
 8003776:	6923      	ldr	r3, [r4, #16]
 8003778:	b94b      	cbnz	r3, 800378e <__swsetup_r+0x7a>
 800377a:	89a3      	ldrh	r3, [r4, #12]
 800377c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003784:	d003      	beq.n	800378e <__swsetup_r+0x7a>
 8003786:	4621      	mov	r1, r4
 8003788:	4628      	mov	r0, r5
 800378a:	f000 fc91 	bl	80040b0 <__smakebuf_r>
 800378e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003792:	f013 0201 	ands.w	r2, r3, #1
 8003796:	d00a      	beq.n	80037ae <__swsetup_r+0x9a>
 8003798:	2200      	movs	r2, #0
 800379a:	60a2      	str	r2, [r4, #8]
 800379c:	6962      	ldr	r2, [r4, #20]
 800379e:	4252      	negs	r2, r2
 80037a0:	61a2      	str	r2, [r4, #24]
 80037a2:	6922      	ldr	r2, [r4, #16]
 80037a4:	b942      	cbnz	r2, 80037b8 <__swsetup_r+0xa4>
 80037a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80037aa:	d1c5      	bne.n	8003738 <__swsetup_r+0x24>
 80037ac:	bd38      	pop	{r3, r4, r5, pc}
 80037ae:	0799      	lsls	r1, r3, #30
 80037b0:	bf58      	it	pl
 80037b2:	6962      	ldrpl	r2, [r4, #20]
 80037b4:	60a2      	str	r2, [r4, #8]
 80037b6:	e7f4      	b.n	80037a2 <__swsetup_r+0x8e>
 80037b8:	2000      	movs	r0, #0
 80037ba:	e7f7      	b.n	80037ac <__swsetup_r+0x98>
 80037bc:	20000018 	.word	0x20000018

080037c0 <memset>:
 80037c0:	4402      	add	r2, r0
 80037c2:	4603      	mov	r3, r0
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d100      	bne.n	80037ca <memset+0xa>
 80037c8:	4770      	bx	lr
 80037ca:	f803 1b01 	strb.w	r1, [r3], #1
 80037ce:	e7f9      	b.n	80037c4 <memset+0x4>

080037d0 <_close_r>:
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	4d06      	ldr	r5, [pc, #24]	@ (80037ec <_close_r+0x1c>)
 80037d4:	2300      	movs	r3, #0
 80037d6:	4604      	mov	r4, r0
 80037d8:	4608      	mov	r0, r1
 80037da:	602b      	str	r3, [r5, #0]
 80037dc:	f7fd fb41 	bl	8000e62 <_close>
 80037e0:	1c43      	adds	r3, r0, #1
 80037e2:	d102      	bne.n	80037ea <_close_r+0x1a>
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	b103      	cbz	r3, 80037ea <_close_r+0x1a>
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	bd38      	pop	{r3, r4, r5, pc}
 80037ec:	20000328 	.word	0x20000328

080037f0 <_lseek_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	4d07      	ldr	r5, [pc, #28]	@ (8003810 <_lseek_r+0x20>)
 80037f4:	4604      	mov	r4, r0
 80037f6:	4608      	mov	r0, r1
 80037f8:	4611      	mov	r1, r2
 80037fa:	2200      	movs	r2, #0
 80037fc:	602a      	str	r2, [r5, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	f7fd fb56 	bl	8000eb0 <_lseek>
 8003804:	1c43      	adds	r3, r0, #1
 8003806:	d102      	bne.n	800380e <_lseek_r+0x1e>
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	b103      	cbz	r3, 800380e <_lseek_r+0x1e>
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	bd38      	pop	{r3, r4, r5, pc}
 8003810:	20000328 	.word	0x20000328

08003814 <_read_r>:
 8003814:	b538      	push	{r3, r4, r5, lr}
 8003816:	4d07      	ldr	r5, [pc, #28]	@ (8003834 <_read_r+0x20>)
 8003818:	4604      	mov	r4, r0
 800381a:	4608      	mov	r0, r1
 800381c:	4611      	mov	r1, r2
 800381e:	2200      	movs	r2, #0
 8003820:	602a      	str	r2, [r5, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	f7fd fb00 	bl	8000e28 <_read>
 8003828:	1c43      	adds	r3, r0, #1
 800382a:	d102      	bne.n	8003832 <_read_r+0x1e>
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	b103      	cbz	r3, 8003832 <_read_r+0x1e>
 8003830:	6023      	str	r3, [r4, #0]
 8003832:	bd38      	pop	{r3, r4, r5, pc}
 8003834:	20000328 	.word	0x20000328

08003838 <_sbrk_r>:
 8003838:	b538      	push	{r3, r4, r5, lr}
 800383a:	4d06      	ldr	r5, [pc, #24]	@ (8003854 <_sbrk_r+0x1c>)
 800383c:	2300      	movs	r3, #0
 800383e:	4604      	mov	r4, r0
 8003840:	4608      	mov	r0, r1
 8003842:	602b      	str	r3, [r5, #0]
 8003844:	f7fd fb42 	bl	8000ecc <_sbrk>
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	d102      	bne.n	8003852 <_sbrk_r+0x1a>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	b103      	cbz	r3, 8003852 <_sbrk_r+0x1a>
 8003850:	6023      	str	r3, [r4, #0]
 8003852:	bd38      	pop	{r3, r4, r5, pc}
 8003854:	20000328 	.word	0x20000328

08003858 <_write_r>:
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	4d07      	ldr	r5, [pc, #28]	@ (8003878 <_write_r+0x20>)
 800385c:	4604      	mov	r4, r0
 800385e:	4608      	mov	r0, r1
 8003860:	4611      	mov	r1, r2
 8003862:	2200      	movs	r2, #0
 8003864:	602a      	str	r2, [r5, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	f7fd fb78 	bl	8000f5c <_write>
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	d102      	bne.n	8003876 <_write_r+0x1e>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	b103      	cbz	r3, 8003876 <_write_r+0x1e>
 8003874:	6023      	str	r3, [r4, #0]
 8003876:	bd38      	pop	{r3, r4, r5, pc}
 8003878:	20000328 	.word	0x20000328

0800387c <__errno>:
 800387c:	4b01      	ldr	r3, [pc, #4]	@ (8003884 <__errno+0x8>)
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000018 	.word	0x20000018

08003888 <__libc_init_array>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	4d0d      	ldr	r5, [pc, #52]	@ (80038c0 <__libc_init_array+0x38>)
 800388c:	4c0d      	ldr	r4, [pc, #52]	@ (80038c4 <__libc_init_array+0x3c>)
 800388e:	1b64      	subs	r4, r4, r5
 8003890:	10a4      	asrs	r4, r4, #2
 8003892:	2600      	movs	r6, #0
 8003894:	42a6      	cmp	r6, r4
 8003896:	d109      	bne.n	80038ac <__libc_init_array+0x24>
 8003898:	4d0b      	ldr	r5, [pc, #44]	@ (80038c8 <__libc_init_array+0x40>)
 800389a:	4c0c      	ldr	r4, [pc, #48]	@ (80038cc <__libc_init_array+0x44>)
 800389c:	f000 fc66 	bl	800416c <_init>
 80038a0:	1b64      	subs	r4, r4, r5
 80038a2:	10a4      	asrs	r4, r4, #2
 80038a4:	2600      	movs	r6, #0
 80038a6:	42a6      	cmp	r6, r4
 80038a8:	d105      	bne.n	80038b6 <__libc_init_array+0x2e>
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
 80038ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b0:	4798      	blx	r3
 80038b2:	3601      	adds	r6, #1
 80038b4:	e7ee      	b.n	8003894 <__libc_init_array+0xc>
 80038b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ba:	4798      	blx	r3
 80038bc:	3601      	adds	r6, #1
 80038be:	e7f2      	b.n	80038a6 <__libc_init_array+0x1e>
 80038c0:	0800424c 	.word	0x0800424c
 80038c4:	0800424c 	.word	0x0800424c
 80038c8:	0800424c 	.word	0x0800424c
 80038cc:	08004250 	.word	0x08004250

080038d0 <__retarget_lock_init_recursive>:
 80038d0:	4770      	bx	lr

080038d2 <__retarget_lock_acquire_recursive>:
 80038d2:	4770      	bx	lr

080038d4 <__retarget_lock_release_recursive>:
 80038d4:	4770      	bx	lr
	...

080038d8 <_free_r>:
 80038d8:	b538      	push	{r3, r4, r5, lr}
 80038da:	4605      	mov	r5, r0
 80038dc:	2900      	cmp	r1, #0
 80038de:	d041      	beq.n	8003964 <_free_r+0x8c>
 80038e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038e4:	1f0c      	subs	r4, r1, #4
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	bfb8      	it	lt
 80038ea:	18e4      	addlt	r4, r4, r3
 80038ec:	f7ff fd10 	bl	8003310 <__malloc_lock>
 80038f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003968 <_free_r+0x90>)
 80038f2:	6813      	ldr	r3, [r2, #0]
 80038f4:	b933      	cbnz	r3, 8003904 <_free_r+0x2c>
 80038f6:	6063      	str	r3, [r4, #4]
 80038f8:	6014      	str	r4, [r2, #0]
 80038fa:	4628      	mov	r0, r5
 80038fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003900:	f7ff bd0c 	b.w	800331c <__malloc_unlock>
 8003904:	42a3      	cmp	r3, r4
 8003906:	d908      	bls.n	800391a <_free_r+0x42>
 8003908:	6820      	ldr	r0, [r4, #0]
 800390a:	1821      	adds	r1, r4, r0
 800390c:	428b      	cmp	r3, r1
 800390e:	bf01      	itttt	eq
 8003910:	6819      	ldreq	r1, [r3, #0]
 8003912:	685b      	ldreq	r3, [r3, #4]
 8003914:	1809      	addeq	r1, r1, r0
 8003916:	6021      	streq	r1, [r4, #0]
 8003918:	e7ed      	b.n	80038f6 <_free_r+0x1e>
 800391a:	461a      	mov	r2, r3
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	b10b      	cbz	r3, 8003924 <_free_r+0x4c>
 8003920:	42a3      	cmp	r3, r4
 8003922:	d9fa      	bls.n	800391a <_free_r+0x42>
 8003924:	6811      	ldr	r1, [r2, #0]
 8003926:	1850      	adds	r0, r2, r1
 8003928:	42a0      	cmp	r0, r4
 800392a:	d10b      	bne.n	8003944 <_free_r+0x6c>
 800392c:	6820      	ldr	r0, [r4, #0]
 800392e:	4401      	add	r1, r0
 8003930:	1850      	adds	r0, r2, r1
 8003932:	4283      	cmp	r3, r0
 8003934:	6011      	str	r1, [r2, #0]
 8003936:	d1e0      	bne.n	80038fa <_free_r+0x22>
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	6053      	str	r3, [r2, #4]
 800393e:	4408      	add	r0, r1
 8003940:	6010      	str	r0, [r2, #0]
 8003942:	e7da      	b.n	80038fa <_free_r+0x22>
 8003944:	d902      	bls.n	800394c <_free_r+0x74>
 8003946:	230c      	movs	r3, #12
 8003948:	602b      	str	r3, [r5, #0]
 800394a:	e7d6      	b.n	80038fa <_free_r+0x22>
 800394c:	6820      	ldr	r0, [r4, #0]
 800394e:	1821      	adds	r1, r4, r0
 8003950:	428b      	cmp	r3, r1
 8003952:	bf04      	itt	eq
 8003954:	6819      	ldreq	r1, [r3, #0]
 8003956:	685b      	ldreq	r3, [r3, #4]
 8003958:	6063      	str	r3, [r4, #4]
 800395a:	bf04      	itt	eq
 800395c:	1809      	addeq	r1, r1, r0
 800395e:	6021      	streq	r1, [r4, #0]
 8003960:	6054      	str	r4, [r2, #4]
 8003962:	e7ca      	b.n	80038fa <_free_r+0x22>
 8003964:	bd38      	pop	{r3, r4, r5, pc}
 8003966:	bf00      	nop
 8003968:	200001e8 	.word	0x200001e8

0800396c <__sfputc_r>:
 800396c:	6893      	ldr	r3, [r2, #8]
 800396e:	3b01      	subs	r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	b410      	push	{r4}
 8003974:	6093      	str	r3, [r2, #8]
 8003976:	da08      	bge.n	800398a <__sfputc_r+0x1e>
 8003978:	6994      	ldr	r4, [r2, #24]
 800397a:	42a3      	cmp	r3, r4
 800397c:	db01      	blt.n	8003982 <__sfputc_r+0x16>
 800397e:	290a      	cmp	r1, #10
 8003980:	d103      	bne.n	800398a <__sfputc_r+0x1e>
 8003982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003986:	f7ff be86 	b.w	8003696 <__swbuf_r>
 800398a:	6813      	ldr	r3, [r2, #0]
 800398c:	1c58      	adds	r0, r3, #1
 800398e:	6010      	str	r0, [r2, #0]
 8003990:	7019      	strb	r1, [r3, #0]
 8003992:	4608      	mov	r0, r1
 8003994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003998:	4770      	bx	lr

0800399a <__sfputs_r>:
 800399a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399c:	4606      	mov	r6, r0
 800399e:	460f      	mov	r7, r1
 80039a0:	4614      	mov	r4, r2
 80039a2:	18d5      	adds	r5, r2, r3
 80039a4:	42ac      	cmp	r4, r5
 80039a6:	d101      	bne.n	80039ac <__sfputs_r+0x12>
 80039a8:	2000      	movs	r0, #0
 80039aa:	e007      	b.n	80039bc <__sfputs_r+0x22>
 80039ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b0:	463a      	mov	r2, r7
 80039b2:	4630      	mov	r0, r6
 80039b4:	f7ff ffda 	bl	800396c <__sfputc_r>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d1f3      	bne.n	80039a4 <__sfputs_r+0xa>
 80039bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039c0 <_vfiprintf_r>:
 80039c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c4:	460d      	mov	r5, r1
 80039c6:	b09d      	sub	sp, #116	@ 0x74
 80039c8:	4614      	mov	r4, r2
 80039ca:	4698      	mov	r8, r3
 80039cc:	4606      	mov	r6, r0
 80039ce:	b118      	cbz	r0, 80039d8 <_vfiprintf_r+0x18>
 80039d0:	6a03      	ldr	r3, [r0, #32]
 80039d2:	b90b      	cbnz	r3, 80039d8 <_vfiprintf_r+0x18>
 80039d4:	f7ff fd76 	bl	80034c4 <__sinit>
 80039d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039da:	07d9      	lsls	r1, r3, #31
 80039dc:	d405      	bmi.n	80039ea <_vfiprintf_r+0x2a>
 80039de:	89ab      	ldrh	r3, [r5, #12]
 80039e0:	059a      	lsls	r2, r3, #22
 80039e2:	d402      	bmi.n	80039ea <_vfiprintf_r+0x2a>
 80039e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039e6:	f7ff ff74 	bl	80038d2 <__retarget_lock_acquire_recursive>
 80039ea:	89ab      	ldrh	r3, [r5, #12]
 80039ec:	071b      	lsls	r3, r3, #28
 80039ee:	d501      	bpl.n	80039f4 <_vfiprintf_r+0x34>
 80039f0:	692b      	ldr	r3, [r5, #16]
 80039f2:	b99b      	cbnz	r3, 8003a1c <_vfiprintf_r+0x5c>
 80039f4:	4629      	mov	r1, r5
 80039f6:	4630      	mov	r0, r6
 80039f8:	f7ff fe8c 	bl	8003714 <__swsetup_r>
 80039fc:	b170      	cbz	r0, 8003a1c <_vfiprintf_r+0x5c>
 80039fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a00:	07dc      	lsls	r4, r3, #31
 8003a02:	d504      	bpl.n	8003a0e <_vfiprintf_r+0x4e>
 8003a04:	f04f 30ff 	mov.w	r0, #4294967295
 8003a08:	b01d      	add	sp, #116	@ 0x74
 8003a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a0e:	89ab      	ldrh	r3, [r5, #12]
 8003a10:	0598      	lsls	r0, r3, #22
 8003a12:	d4f7      	bmi.n	8003a04 <_vfiprintf_r+0x44>
 8003a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a16:	f7ff ff5d 	bl	80038d4 <__retarget_lock_release_recursive>
 8003a1a:	e7f3      	b.n	8003a04 <_vfiprintf_r+0x44>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a20:	2320      	movs	r3, #32
 8003a22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a2a:	2330      	movs	r3, #48	@ 0x30
 8003a2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003bdc <_vfiprintf_r+0x21c>
 8003a30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a34:	f04f 0901 	mov.w	r9, #1
 8003a38:	4623      	mov	r3, r4
 8003a3a:	469a      	mov	sl, r3
 8003a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a40:	b10a      	cbz	r2, 8003a46 <_vfiprintf_r+0x86>
 8003a42:	2a25      	cmp	r2, #37	@ 0x25
 8003a44:	d1f9      	bne.n	8003a3a <_vfiprintf_r+0x7a>
 8003a46:	ebba 0b04 	subs.w	fp, sl, r4
 8003a4a:	d00b      	beq.n	8003a64 <_vfiprintf_r+0xa4>
 8003a4c:	465b      	mov	r3, fp
 8003a4e:	4622      	mov	r2, r4
 8003a50:	4629      	mov	r1, r5
 8003a52:	4630      	mov	r0, r6
 8003a54:	f7ff ffa1 	bl	800399a <__sfputs_r>
 8003a58:	3001      	adds	r0, #1
 8003a5a:	f000 80a7 	beq.w	8003bac <_vfiprintf_r+0x1ec>
 8003a5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a60:	445a      	add	r2, fp
 8003a62:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a64:	f89a 3000 	ldrb.w	r3, [sl]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 809f 	beq.w	8003bac <_vfiprintf_r+0x1ec>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f04f 32ff 	mov.w	r2, #4294967295
 8003a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a78:	f10a 0a01 	add.w	sl, sl, #1
 8003a7c:	9304      	str	r3, [sp, #16]
 8003a7e:	9307      	str	r3, [sp, #28]
 8003a80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a84:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a86:	4654      	mov	r4, sl
 8003a88:	2205      	movs	r2, #5
 8003a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a8e:	4853      	ldr	r0, [pc, #332]	@ (8003bdc <_vfiprintf_r+0x21c>)
 8003a90:	f7fc fba6 	bl	80001e0 <memchr>
 8003a94:	9a04      	ldr	r2, [sp, #16]
 8003a96:	b9d8      	cbnz	r0, 8003ad0 <_vfiprintf_r+0x110>
 8003a98:	06d1      	lsls	r1, r2, #27
 8003a9a:	bf44      	itt	mi
 8003a9c:	2320      	movmi	r3, #32
 8003a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003aa2:	0713      	lsls	r3, r2, #28
 8003aa4:	bf44      	itt	mi
 8003aa6:	232b      	movmi	r3, #43	@ 0x2b
 8003aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003aac:	f89a 3000 	ldrb.w	r3, [sl]
 8003ab0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ab2:	d015      	beq.n	8003ae0 <_vfiprintf_r+0x120>
 8003ab4:	9a07      	ldr	r2, [sp, #28]
 8003ab6:	4654      	mov	r4, sl
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f04f 0c0a 	mov.w	ip, #10
 8003abe:	4621      	mov	r1, r4
 8003ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ac4:	3b30      	subs	r3, #48	@ 0x30
 8003ac6:	2b09      	cmp	r3, #9
 8003ac8:	d94b      	bls.n	8003b62 <_vfiprintf_r+0x1a2>
 8003aca:	b1b0      	cbz	r0, 8003afa <_vfiprintf_r+0x13a>
 8003acc:	9207      	str	r2, [sp, #28]
 8003ace:	e014      	b.n	8003afa <_vfiprintf_r+0x13a>
 8003ad0:	eba0 0308 	sub.w	r3, r0, r8
 8003ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	9304      	str	r3, [sp, #16]
 8003adc:	46a2      	mov	sl, r4
 8003ade:	e7d2      	b.n	8003a86 <_vfiprintf_r+0xc6>
 8003ae0:	9b03      	ldr	r3, [sp, #12]
 8003ae2:	1d19      	adds	r1, r3, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	9103      	str	r1, [sp, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bfbb      	ittet	lt
 8003aec:	425b      	neglt	r3, r3
 8003aee:	f042 0202 	orrlt.w	r2, r2, #2
 8003af2:	9307      	strge	r3, [sp, #28]
 8003af4:	9307      	strlt	r3, [sp, #28]
 8003af6:	bfb8      	it	lt
 8003af8:	9204      	strlt	r2, [sp, #16]
 8003afa:	7823      	ldrb	r3, [r4, #0]
 8003afc:	2b2e      	cmp	r3, #46	@ 0x2e
 8003afe:	d10a      	bne.n	8003b16 <_vfiprintf_r+0x156>
 8003b00:	7863      	ldrb	r3, [r4, #1]
 8003b02:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b04:	d132      	bne.n	8003b6c <_vfiprintf_r+0x1ac>
 8003b06:	9b03      	ldr	r3, [sp, #12]
 8003b08:	1d1a      	adds	r2, r3, #4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	9203      	str	r2, [sp, #12]
 8003b0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b12:	3402      	adds	r4, #2
 8003b14:	9305      	str	r3, [sp, #20]
 8003b16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003bec <_vfiprintf_r+0x22c>
 8003b1a:	7821      	ldrb	r1, [r4, #0]
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	4650      	mov	r0, sl
 8003b20:	f7fc fb5e 	bl	80001e0 <memchr>
 8003b24:	b138      	cbz	r0, 8003b36 <_vfiprintf_r+0x176>
 8003b26:	9b04      	ldr	r3, [sp, #16]
 8003b28:	eba0 000a 	sub.w	r0, r0, sl
 8003b2c:	2240      	movs	r2, #64	@ 0x40
 8003b2e:	4082      	lsls	r2, r0
 8003b30:	4313      	orrs	r3, r2
 8003b32:	3401      	adds	r4, #1
 8003b34:	9304      	str	r3, [sp, #16]
 8003b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b3a:	4829      	ldr	r0, [pc, #164]	@ (8003be0 <_vfiprintf_r+0x220>)
 8003b3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b40:	2206      	movs	r2, #6
 8003b42:	f7fc fb4d 	bl	80001e0 <memchr>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d03f      	beq.n	8003bca <_vfiprintf_r+0x20a>
 8003b4a:	4b26      	ldr	r3, [pc, #152]	@ (8003be4 <_vfiprintf_r+0x224>)
 8003b4c:	bb1b      	cbnz	r3, 8003b96 <_vfiprintf_r+0x1d6>
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	3307      	adds	r3, #7
 8003b52:	f023 0307 	bic.w	r3, r3, #7
 8003b56:	3308      	adds	r3, #8
 8003b58:	9303      	str	r3, [sp, #12]
 8003b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b5c:	443b      	add	r3, r7
 8003b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b60:	e76a      	b.n	8003a38 <_vfiprintf_r+0x78>
 8003b62:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b66:	460c      	mov	r4, r1
 8003b68:	2001      	movs	r0, #1
 8003b6a:	e7a8      	b.n	8003abe <_vfiprintf_r+0xfe>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	3401      	adds	r4, #1
 8003b70:	9305      	str	r3, [sp, #20]
 8003b72:	4619      	mov	r1, r3
 8003b74:	f04f 0c0a 	mov.w	ip, #10
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b7e:	3a30      	subs	r2, #48	@ 0x30
 8003b80:	2a09      	cmp	r2, #9
 8003b82:	d903      	bls.n	8003b8c <_vfiprintf_r+0x1cc>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0c6      	beq.n	8003b16 <_vfiprintf_r+0x156>
 8003b88:	9105      	str	r1, [sp, #20]
 8003b8a:	e7c4      	b.n	8003b16 <_vfiprintf_r+0x156>
 8003b8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b90:	4604      	mov	r4, r0
 8003b92:	2301      	movs	r3, #1
 8003b94:	e7f0      	b.n	8003b78 <_vfiprintf_r+0x1b8>
 8003b96:	ab03      	add	r3, sp, #12
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	462a      	mov	r2, r5
 8003b9c:	4b12      	ldr	r3, [pc, #72]	@ (8003be8 <_vfiprintf_r+0x228>)
 8003b9e:	a904      	add	r1, sp, #16
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f3af 8000 	nop.w
 8003ba6:	4607      	mov	r7, r0
 8003ba8:	1c78      	adds	r0, r7, #1
 8003baa:	d1d6      	bne.n	8003b5a <_vfiprintf_r+0x19a>
 8003bac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bae:	07d9      	lsls	r1, r3, #31
 8003bb0:	d405      	bmi.n	8003bbe <_vfiprintf_r+0x1fe>
 8003bb2:	89ab      	ldrh	r3, [r5, #12]
 8003bb4:	059a      	lsls	r2, r3, #22
 8003bb6:	d402      	bmi.n	8003bbe <_vfiprintf_r+0x1fe>
 8003bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bba:	f7ff fe8b 	bl	80038d4 <__retarget_lock_release_recursive>
 8003bbe:	89ab      	ldrh	r3, [r5, #12]
 8003bc0:	065b      	lsls	r3, r3, #25
 8003bc2:	f53f af1f 	bmi.w	8003a04 <_vfiprintf_r+0x44>
 8003bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003bc8:	e71e      	b.n	8003a08 <_vfiprintf_r+0x48>
 8003bca:	ab03      	add	r3, sp, #12
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	462a      	mov	r2, r5
 8003bd0:	4b05      	ldr	r3, [pc, #20]	@ (8003be8 <_vfiprintf_r+0x228>)
 8003bd2:	a904      	add	r1, sp, #16
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f000 f879 	bl	8003ccc <_printf_i>
 8003bda:	e7e4      	b.n	8003ba6 <_vfiprintf_r+0x1e6>
 8003bdc:	08004211 	.word	0x08004211
 8003be0:	0800421b 	.word	0x0800421b
 8003be4:	00000000 	.word	0x00000000
 8003be8:	0800399b 	.word	0x0800399b
 8003bec:	08004217 	.word	0x08004217

08003bf0 <_printf_common>:
 8003bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf4:	4616      	mov	r6, r2
 8003bf6:	4698      	mov	r8, r3
 8003bf8:	688a      	ldr	r2, [r1, #8]
 8003bfa:	690b      	ldr	r3, [r1, #16]
 8003bfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c00:	4293      	cmp	r3, r2
 8003c02:	bfb8      	it	lt
 8003c04:	4613      	movlt	r3, r2
 8003c06:	6033      	str	r3, [r6, #0]
 8003c08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c0c:	4607      	mov	r7, r0
 8003c0e:	460c      	mov	r4, r1
 8003c10:	b10a      	cbz	r2, 8003c16 <_printf_common+0x26>
 8003c12:	3301      	adds	r3, #1
 8003c14:	6033      	str	r3, [r6, #0]
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	0699      	lsls	r1, r3, #26
 8003c1a:	bf42      	ittt	mi
 8003c1c:	6833      	ldrmi	r3, [r6, #0]
 8003c1e:	3302      	addmi	r3, #2
 8003c20:	6033      	strmi	r3, [r6, #0]
 8003c22:	6825      	ldr	r5, [r4, #0]
 8003c24:	f015 0506 	ands.w	r5, r5, #6
 8003c28:	d106      	bne.n	8003c38 <_printf_common+0x48>
 8003c2a:	f104 0a19 	add.w	sl, r4, #25
 8003c2e:	68e3      	ldr	r3, [r4, #12]
 8003c30:	6832      	ldr	r2, [r6, #0]
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	42ab      	cmp	r3, r5
 8003c36:	dc26      	bgt.n	8003c86 <_printf_common+0x96>
 8003c38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c3c:	6822      	ldr	r2, [r4, #0]
 8003c3e:	3b00      	subs	r3, #0
 8003c40:	bf18      	it	ne
 8003c42:	2301      	movne	r3, #1
 8003c44:	0692      	lsls	r2, r2, #26
 8003c46:	d42b      	bmi.n	8003ca0 <_printf_common+0xb0>
 8003c48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c4c:	4641      	mov	r1, r8
 8003c4e:	4638      	mov	r0, r7
 8003c50:	47c8      	blx	r9
 8003c52:	3001      	adds	r0, #1
 8003c54:	d01e      	beq.n	8003c94 <_printf_common+0xa4>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	6922      	ldr	r2, [r4, #16]
 8003c5a:	f003 0306 	and.w	r3, r3, #6
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	bf02      	ittt	eq
 8003c62:	68e5      	ldreq	r5, [r4, #12]
 8003c64:	6833      	ldreq	r3, [r6, #0]
 8003c66:	1aed      	subeq	r5, r5, r3
 8003c68:	68a3      	ldr	r3, [r4, #8]
 8003c6a:	bf0c      	ite	eq
 8003c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c70:	2500      	movne	r5, #0
 8003c72:	4293      	cmp	r3, r2
 8003c74:	bfc4      	itt	gt
 8003c76:	1a9b      	subgt	r3, r3, r2
 8003c78:	18ed      	addgt	r5, r5, r3
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	341a      	adds	r4, #26
 8003c7e:	42b5      	cmp	r5, r6
 8003c80:	d11a      	bne.n	8003cb8 <_printf_common+0xc8>
 8003c82:	2000      	movs	r0, #0
 8003c84:	e008      	b.n	8003c98 <_printf_common+0xa8>
 8003c86:	2301      	movs	r3, #1
 8003c88:	4652      	mov	r2, sl
 8003c8a:	4641      	mov	r1, r8
 8003c8c:	4638      	mov	r0, r7
 8003c8e:	47c8      	blx	r9
 8003c90:	3001      	adds	r0, #1
 8003c92:	d103      	bne.n	8003c9c <_printf_common+0xac>
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295
 8003c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c9c:	3501      	adds	r5, #1
 8003c9e:	e7c6      	b.n	8003c2e <_printf_common+0x3e>
 8003ca0:	18e1      	adds	r1, r4, r3
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	2030      	movs	r0, #48	@ 0x30
 8003ca6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003caa:	4422      	add	r2, r4
 8003cac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	e7c7      	b.n	8003c48 <_printf_common+0x58>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	4622      	mov	r2, r4
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	47c8      	blx	r9
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	d0e6      	beq.n	8003c94 <_printf_common+0xa4>
 8003cc6:	3601      	adds	r6, #1
 8003cc8:	e7d9      	b.n	8003c7e <_printf_common+0x8e>
	...

08003ccc <_printf_i>:
 8003ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd0:	7e0f      	ldrb	r7, [r1, #24]
 8003cd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cd4:	2f78      	cmp	r7, #120	@ 0x78
 8003cd6:	4691      	mov	r9, r2
 8003cd8:	4680      	mov	r8, r0
 8003cda:	460c      	mov	r4, r1
 8003cdc:	469a      	mov	sl, r3
 8003cde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ce2:	d807      	bhi.n	8003cf4 <_printf_i+0x28>
 8003ce4:	2f62      	cmp	r7, #98	@ 0x62
 8003ce6:	d80a      	bhi.n	8003cfe <_printf_i+0x32>
 8003ce8:	2f00      	cmp	r7, #0
 8003cea:	f000 80d2 	beq.w	8003e92 <_printf_i+0x1c6>
 8003cee:	2f58      	cmp	r7, #88	@ 0x58
 8003cf0:	f000 80b9 	beq.w	8003e66 <_printf_i+0x19a>
 8003cf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003cfc:	e03a      	b.n	8003d74 <_printf_i+0xa8>
 8003cfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d02:	2b15      	cmp	r3, #21
 8003d04:	d8f6      	bhi.n	8003cf4 <_printf_i+0x28>
 8003d06:	a101      	add	r1, pc, #4	@ (adr r1, 8003d0c <_printf_i+0x40>)
 8003d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d0c:	08003d65 	.word	0x08003d65
 8003d10:	08003d79 	.word	0x08003d79
 8003d14:	08003cf5 	.word	0x08003cf5
 8003d18:	08003cf5 	.word	0x08003cf5
 8003d1c:	08003cf5 	.word	0x08003cf5
 8003d20:	08003cf5 	.word	0x08003cf5
 8003d24:	08003d79 	.word	0x08003d79
 8003d28:	08003cf5 	.word	0x08003cf5
 8003d2c:	08003cf5 	.word	0x08003cf5
 8003d30:	08003cf5 	.word	0x08003cf5
 8003d34:	08003cf5 	.word	0x08003cf5
 8003d38:	08003e79 	.word	0x08003e79
 8003d3c:	08003da3 	.word	0x08003da3
 8003d40:	08003e33 	.word	0x08003e33
 8003d44:	08003cf5 	.word	0x08003cf5
 8003d48:	08003cf5 	.word	0x08003cf5
 8003d4c:	08003e9b 	.word	0x08003e9b
 8003d50:	08003cf5 	.word	0x08003cf5
 8003d54:	08003da3 	.word	0x08003da3
 8003d58:	08003cf5 	.word	0x08003cf5
 8003d5c:	08003cf5 	.word	0x08003cf5
 8003d60:	08003e3b 	.word	0x08003e3b
 8003d64:	6833      	ldr	r3, [r6, #0]
 8003d66:	1d1a      	adds	r2, r3, #4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6032      	str	r2, [r6, #0]
 8003d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d74:	2301      	movs	r3, #1
 8003d76:	e09d      	b.n	8003eb4 <_printf_i+0x1e8>
 8003d78:	6833      	ldr	r3, [r6, #0]
 8003d7a:	6820      	ldr	r0, [r4, #0]
 8003d7c:	1d19      	adds	r1, r3, #4
 8003d7e:	6031      	str	r1, [r6, #0]
 8003d80:	0606      	lsls	r6, r0, #24
 8003d82:	d501      	bpl.n	8003d88 <_printf_i+0xbc>
 8003d84:	681d      	ldr	r5, [r3, #0]
 8003d86:	e003      	b.n	8003d90 <_printf_i+0xc4>
 8003d88:	0645      	lsls	r5, r0, #25
 8003d8a:	d5fb      	bpl.n	8003d84 <_printf_i+0xb8>
 8003d8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d90:	2d00      	cmp	r5, #0
 8003d92:	da03      	bge.n	8003d9c <_printf_i+0xd0>
 8003d94:	232d      	movs	r3, #45	@ 0x2d
 8003d96:	426d      	negs	r5, r5
 8003d98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d9c:	4859      	ldr	r0, [pc, #356]	@ (8003f04 <_printf_i+0x238>)
 8003d9e:	230a      	movs	r3, #10
 8003da0:	e011      	b.n	8003dc6 <_printf_i+0xfa>
 8003da2:	6821      	ldr	r1, [r4, #0]
 8003da4:	6833      	ldr	r3, [r6, #0]
 8003da6:	0608      	lsls	r0, r1, #24
 8003da8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003dac:	d402      	bmi.n	8003db4 <_printf_i+0xe8>
 8003dae:	0649      	lsls	r1, r1, #25
 8003db0:	bf48      	it	mi
 8003db2:	b2ad      	uxthmi	r5, r5
 8003db4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003db6:	4853      	ldr	r0, [pc, #332]	@ (8003f04 <_printf_i+0x238>)
 8003db8:	6033      	str	r3, [r6, #0]
 8003dba:	bf14      	ite	ne
 8003dbc:	230a      	movne	r3, #10
 8003dbe:	2308      	moveq	r3, #8
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003dc6:	6866      	ldr	r6, [r4, #4]
 8003dc8:	60a6      	str	r6, [r4, #8]
 8003dca:	2e00      	cmp	r6, #0
 8003dcc:	bfa2      	ittt	ge
 8003dce:	6821      	ldrge	r1, [r4, #0]
 8003dd0:	f021 0104 	bicge.w	r1, r1, #4
 8003dd4:	6021      	strge	r1, [r4, #0]
 8003dd6:	b90d      	cbnz	r5, 8003ddc <_printf_i+0x110>
 8003dd8:	2e00      	cmp	r6, #0
 8003dda:	d04b      	beq.n	8003e74 <_printf_i+0x1a8>
 8003ddc:	4616      	mov	r6, r2
 8003dde:	fbb5 f1f3 	udiv	r1, r5, r3
 8003de2:	fb03 5711 	mls	r7, r3, r1, r5
 8003de6:	5dc7      	ldrb	r7, [r0, r7]
 8003de8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dec:	462f      	mov	r7, r5
 8003dee:	42bb      	cmp	r3, r7
 8003df0:	460d      	mov	r5, r1
 8003df2:	d9f4      	bls.n	8003dde <_printf_i+0x112>
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d10b      	bne.n	8003e10 <_printf_i+0x144>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	07df      	lsls	r7, r3, #31
 8003dfc:	d508      	bpl.n	8003e10 <_printf_i+0x144>
 8003dfe:	6923      	ldr	r3, [r4, #16]
 8003e00:	6861      	ldr	r1, [r4, #4]
 8003e02:	4299      	cmp	r1, r3
 8003e04:	bfde      	ittt	le
 8003e06:	2330      	movle	r3, #48	@ 0x30
 8003e08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e10:	1b92      	subs	r2, r2, r6
 8003e12:	6122      	str	r2, [r4, #16]
 8003e14:	f8cd a000 	str.w	sl, [sp]
 8003e18:	464b      	mov	r3, r9
 8003e1a:	aa03      	add	r2, sp, #12
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4640      	mov	r0, r8
 8003e20:	f7ff fee6 	bl	8003bf0 <_printf_common>
 8003e24:	3001      	adds	r0, #1
 8003e26:	d14a      	bne.n	8003ebe <_printf_i+0x1f2>
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2c:	b004      	add	sp, #16
 8003e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	f043 0320 	orr.w	r3, r3, #32
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	4833      	ldr	r0, [pc, #204]	@ (8003f08 <_printf_i+0x23c>)
 8003e3c:	2778      	movs	r7, #120	@ 0x78
 8003e3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	6831      	ldr	r1, [r6, #0]
 8003e46:	061f      	lsls	r7, r3, #24
 8003e48:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e4c:	d402      	bmi.n	8003e54 <_printf_i+0x188>
 8003e4e:	065f      	lsls	r7, r3, #25
 8003e50:	bf48      	it	mi
 8003e52:	b2ad      	uxthmi	r5, r5
 8003e54:	6031      	str	r1, [r6, #0]
 8003e56:	07d9      	lsls	r1, r3, #31
 8003e58:	bf44      	itt	mi
 8003e5a:	f043 0320 	orrmi.w	r3, r3, #32
 8003e5e:	6023      	strmi	r3, [r4, #0]
 8003e60:	b11d      	cbz	r5, 8003e6a <_printf_i+0x19e>
 8003e62:	2310      	movs	r3, #16
 8003e64:	e7ac      	b.n	8003dc0 <_printf_i+0xf4>
 8003e66:	4827      	ldr	r0, [pc, #156]	@ (8003f04 <_printf_i+0x238>)
 8003e68:	e7e9      	b.n	8003e3e <_printf_i+0x172>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	f023 0320 	bic.w	r3, r3, #32
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	e7f6      	b.n	8003e62 <_printf_i+0x196>
 8003e74:	4616      	mov	r6, r2
 8003e76:	e7bd      	b.n	8003df4 <_printf_i+0x128>
 8003e78:	6833      	ldr	r3, [r6, #0]
 8003e7a:	6825      	ldr	r5, [r4, #0]
 8003e7c:	6961      	ldr	r1, [r4, #20]
 8003e7e:	1d18      	adds	r0, r3, #4
 8003e80:	6030      	str	r0, [r6, #0]
 8003e82:	062e      	lsls	r6, r5, #24
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	d501      	bpl.n	8003e8c <_printf_i+0x1c0>
 8003e88:	6019      	str	r1, [r3, #0]
 8003e8a:	e002      	b.n	8003e92 <_printf_i+0x1c6>
 8003e8c:	0668      	lsls	r0, r5, #25
 8003e8e:	d5fb      	bpl.n	8003e88 <_printf_i+0x1bc>
 8003e90:	8019      	strh	r1, [r3, #0]
 8003e92:	2300      	movs	r3, #0
 8003e94:	6123      	str	r3, [r4, #16]
 8003e96:	4616      	mov	r6, r2
 8003e98:	e7bc      	b.n	8003e14 <_printf_i+0x148>
 8003e9a:	6833      	ldr	r3, [r6, #0]
 8003e9c:	1d1a      	adds	r2, r3, #4
 8003e9e:	6032      	str	r2, [r6, #0]
 8003ea0:	681e      	ldr	r6, [r3, #0]
 8003ea2:	6862      	ldr	r2, [r4, #4]
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f7fc f99a 	bl	80001e0 <memchr>
 8003eac:	b108      	cbz	r0, 8003eb2 <_printf_i+0x1e6>
 8003eae:	1b80      	subs	r0, r0, r6
 8003eb0:	6060      	str	r0, [r4, #4]
 8003eb2:	6863      	ldr	r3, [r4, #4]
 8003eb4:	6123      	str	r3, [r4, #16]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ebc:	e7aa      	b.n	8003e14 <_printf_i+0x148>
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	4632      	mov	r2, r6
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	4640      	mov	r0, r8
 8003ec6:	47d0      	blx	sl
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d0ad      	beq.n	8003e28 <_printf_i+0x15c>
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	079b      	lsls	r3, r3, #30
 8003ed0:	d413      	bmi.n	8003efa <_printf_i+0x22e>
 8003ed2:	68e0      	ldr	r0, [r4, #12]
 8003ed4:	9b03      	ldr	r3, [sp, #12]
 8003ed6:	4298      	cmp	r0, r3
 8003ed8:	bfb8      	it	lt
 8003eda:	4618      	movlt	r0, r3
 8003edc:	e7a6      	b.n	8003e2c <_printf_i+0x160>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4632      	mov	r2, r6
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	4640      	mov	r0, r8
 8003ee6:	47d0      	blx	sl
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d09d      	beq.n	8003e28 <_printf_i+0x15c>
 8003eec:	3501      	adds	r5, #1
 8003eee:	68e3      	ldr	r3, [r4, #12]
 8003ef0:	9903      	ldr	r1, [sp, #12]
 8003ef2:	1a5b      	subs	r3, r3, r1
 8003ef4:	42ab      	cmp	r3, r5
 8003ef6:	dcf2      	bgt.n	8003ede <_printf_i+0x212>
 8003ef8:	e7eb      	b.n	8003ed2 <_printf_i+0x206>
 8003efa:	2500      	movs	r5, #0
 8003efc:	f104 0619 	add.w	r6, r4, #25
 8003f00:	e7f5      	b.n	8003eee <_printf_i+0x222>
 8003f02:	bf00      	nop
 8003f04:	08004222 	.word	0x08004222
 8003f08:	08004233 	.word	0x08004233

08003f0c <__sflush_r>:
 8003f0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f14:	0716      	lsls	r6, r2, #28
 8003f16:	4605      	mov	r5, r0
 8003f18:	460c      	mov	r4, r1
 8003f1a:	d454      	bmi.n	8003fc6 <__sflush_r+0xba>
 8003f1c:	684b      	ldr	r3, [r1, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	dc02      	bgt.n	8003f28 <__sflush_r+0x1c>
 8003f22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	dd48      	ble.n	8003fba <__sflush_r+0xae>
 8003f28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f2a:	2e00      	cmp	r6, #0
 8003f2c:	d045      	beq.n	8003fba <__sflush_r+0xae>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003f34:	682f      	ldr	r7, [r5, #0]
 8003f36:	6a21      	ldr	r1, [r4, #32]
 8003f38:	602b      	str	r3, [r5, #0]
 8003f3a:	d030      	beq.n	8003f9e <__sflush_r+0x92>
 8003f3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f3e:	89a3      	ldrh	r3, [r4, #12]
 8003f40:	0759      	lsls	r1, r3, #29
 8003f42:	d505      	bpl.n	8003f50 <__sflush_r+0x44>
 8003f44:	6863      	ldr	r3, [r4, #4]
 8003f46:	1ad2      	subs	r2, r2, r3
 8003f48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f4a:	b10b      	cbz	r3, 8003f50 <__sflush_r+0x44>
 8003f4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f4e:	1ad2      	subs	r2, r2, r3
 8003f50:	2300      	movs	r3, #0
 8003f52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f54:	6a21      	ldr	r1, [r4, #32]
 8003f56:	4628      	mov	r0, r5
 8003f58:	47b0      	blx	r6
 8003f5a:	1c43      	adds	r3, r0, #1
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	d106      	bne.n	8003f6e <__sflush_r+0x62>
 8003f60:	6829      	ldr	r1, [r5, #0]
 8003f62:	291d      	cmp	r1, #29
 8003f64:	d82b      	bhi.n	8003fbe <__sflush_r+0xb2>
 8003f66:	4a2a      	ldr	r2, [pc, #168]	@ (8004010 <__sflush_r+0x104>)
 8003f68:	410a      	asrs	r2, r1
 8003f6a:	07d6      	lsls	r6, r2, #31
 8003f6c:	d427      	bmi.n	8003fbe <__sflush_r+0xb2>
 8003f6e:	2200      	movs	r2, #0
 8003f70:	6062      	str	r2, [r4, #4]
 8003f72:	04d9      	lsls	r1, r3, #19
 8003f74:	6922      	ldr	r2, [r4, #16]
 8003f76:	6022      	str	r2, [r4, #0]
 8003f78:	d504      	bpl.n	8003f84 <__sflush_r+0x78>
 8003f7a:	1c42      	adds	r2, r0, #1
 8003f7c:	d101      	bne.n	8003f82 <__sflush_r+0x76>
 8003f7e:	682b      	ldr	r3, [r5, #0]
 8003f80:	b903      	cbnz	r3, 8003f84 <__sflush_r+0x78>
 8003f82:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f86:	602f      	str	r7, [r5, #0]
 8003f88:	b1b9      	cbz	r1, 8003fba <__sflush_r+0xae>
 8003f8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f8e:	4299      	cmp	r1, r3
 8003f90:	d002      	beq.n	8003f98 <__sflush_r+0x8c>
 8003f92:	4628      	mov	r0, r5
 8003f94:	f7ff fca0 	bl	80038d8 <_free_r>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f9c:	e00d      	b.n	8003fba <__sflush_r+0xae>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	47b0      	blx	r6
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	1c50      	adds	r0, r2, #1
 8003fa8:	d1c9      	bne.n	8003f3e <__sflush_r+0x32>
 8003faa:	682b      	ldr	r3, [r5, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0c6      	beq.n	8003f3e <__sflush_r+0x32>
 8003fb0:	2b1d      	cmp	r3, #29
 8003fb2:	d001      	beq.n	8003fb8 <__sflush_r+0xac>
 8003fb4:	2b16      	cmp	r3, #22
 8003fb6:	d11e      	bne.n	8003ff6 <__sflush_r+0xea>
 8003fb8:	602f      	str	r7, [r5, #0]
 8003fba:	2000      	movs	r0, #0
 8003fbc:	e022      	b.n	8004004 <__sflush_r+0xf8>
 8003fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fc2:	b21b      	sxth	r3, r3
 8003fc4:	e01b      	b.n	8003ffe <__sflush_r+0xf2>
 8003fc6:	690f      	ldr	r7, [r1, #16]
 8003fc8:	2f00      	cmp	r7, #0
 8003fca:	d0f6      	beq.n	8003fba <__sflush_r+0xae>
 8003fcc:	0793      	lsls	r3, r2, #30
 8003fce:	680e      	ldr	r6, [r1, #0]
 8003fd0:	bf08      	it	eq
 8003fd2:	694b      	ldreq	r3, [r1, #20]
 8003fd4:	600f      	str	r7, [r1, #0]
 8003fd6:	bf18      	it	ne
 8003fd8:	2300      	movne	r3, #0
 8003fda:	eba6 0807 	sub.w	r8, r6, r7
 8003fde:	608b      	str	r3, [r1, #8]
 8003fe0:	f1b8 0f00 	cmp.w	r8, #0
 8003fe4:	dde9      	ble.n	8003fba <__sflush_r+0xae>
 8003fe6:	6a21      	ldr	r1, [r4, #32]
 8003fe8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003fea:	4643      	mov	r3, r8
 8003fec:	463a      	mov	r2, r7
 8003fee:	4628      	mov	r0, r5
 8003ff0:	47b0      	blx	r6
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	dc08      	bgt.n	8004008 <__sflush_r+0xfc>
 8003ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ffe:	81a3      	strh	r3, [r4, #12]
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004008:	4407      	add	r7, r0
 800400a:	eba8 0800 	sub.w	r8, r8, r0
 800400e:	e7e7      	b.n	8003fe0 <__sflush_r+0xd4>
 8004010:	dfbffffe 	.word	0xdfbffffe

08004014 <_fflush_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	690b      	ldr	r3, [r1, #16]
 8004018:	4605      	mov	r5, r0
 800401a:	460c      	mov	r4, r1
 800401c:	b913      	cbnz	r3, 8004024 <_fflush_r+0x10>
 800401e:	2500      	movs	r5, #0
 8004020:	4628      	mov	r0, r5
 8004022:	bd38      	pop	{r3, r4, r5, pc}
 8004024:	b118      	cbz	r0, 800402e <_fflush_r+0x1a>
 8004026:	6a03      	ldr	r3, [r0, #32]
 8004028:	b90b      	cbnz	r3, 800402e <_fflush_r+0x1a>
 800402a:	f7ff fa4b 	bl	80034c4 <__sinit>
 800402e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f3      	beq.n	800401e <_fflush_r+0xa>
 8004036:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004038:	07d0      	lsls	r0, r2, #31
 800403a:	d404      	bmi.n	8004046 <_fflush_r+0x32>
 800403c:	0599      	lsls	r1, r3, #22
 800403e:	d402      	bmi.n	8004046 <_fflush_r+0x32>
 8004040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004042:	f7ff fc46 	bl	80038d2 <__retarget_lock_acquire_recursive>
 8004046:	4628      	mov	r0, r5
 8004048:	4621      	mov	r1, r4
 800404a:	f7ff ff5f 	bl	8003f0c <__sflush_r>
 800404e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004050:	07da      	lsls	r2, r3, #31
 8004052:	4605      	mov	r5, r0
 8004054:	d4e4      	bmi.n	8004020 <_fflush_r+0xc>
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	059b      	lsls	r3, r3, #22
 800405a:	d4e1      	bmi.n	8004020 <_fflush_r+0xc>
 800405c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800405e:	f7ff fc39 	bl	80038d4 <__retarget_lock_release_recursive>
 8004062:	e7dd      	b.n	8004020 <_fflush_r+0xc>

08004064 <__swhatbuf_r>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	460c      	mov	r4, r1
 8004068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800406c:	2900      	cmp	r1, #0
 800406e:	b096      	sub	sp, #88	@ 0x58
 8004070:	4615      	mov	r5, r2
 8004072:	461e      	mov	r6, r3
 8004074:	da0d      	bge.n	8004092 <__swhatbuf_r+0x2e>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800407c:	f04f 0100 	mov.w	r1, #0
 8004080:	bf14      	ite	ne
 8004082:	2340      	movne	r3, #64	@ 0x40
 8004084:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004088:	2000      	movs	r0, #0
 800408a:	6031      	str	r1, [r6, #0]
 800408c:	602b      	str	r3, [r5, #0]
 800408e:	b016      	add	sp, #88	@ 0x58
 8004090:	bd70      	pop	{r4, r5, r6, pc}
 8004092:	466a      	mov	r2, sp
 8004094:	f000 f848 	bl	8004128 <_fstat_r>
 8004098:	2800      	cmp	r0, #0
 800409a:	dbec      	blt.n	8004076 <__swhatbuf_r+0x12>
 800409c:	9901      	ldr	r1, [sp, #4]
 800409e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80040a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80040a6:	4259      	negs	r1, r3
 80040a8:	4159      	adcs	r1, r3
 80040aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040ae:	e7eb      	b.n	8004088 <__swhatbuf_r+0x24>

080040b0 <__smakebuf_r>:
 80040b0:	898b      	ldrh	r3, [r1, #12]
 80040b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040b4:	079d      	lsls	r5, r3, #30
 80040b6:	4606      	mov	r6, r0
 80040b8:	460c      	mov	r4, r1
 80040ba:	d507      	bpl.n	80040cc <__smakebuf_r+0x1c>
 80040bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	6123      	str	r3, [r4, #16]
 80040c4:	2301      	movs	r3, #1
 80040c6:	6163      	str	r3, [r4, #20]
 80040c8:	b003      	add	sp, #12
 80040ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040cc:	ab01      	add	r3, sp, #4
 80040ce:	466a      	mov	r2, sp
 80040d0:	f7ff ffc8 	bl	8004064 <__swhatbuf_r>
 80040d4:	9f00      	ldr	r7, [sp, #0]
 80040d6:	4605      	mov	r5, r0
 80040d8:	4639      	mov	r1, r7
 80040da:	4630      	mov	r0, r6
 80040dc:	f7ff f898 	bl	8003210 <_malloc_r>
 80040e0:	b948      	cbnz	r0, 80040f6 <__smakebuf_r+0x46>
 80040e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040e6:	059a      	lsls	r2, r3, #22
 80040e8:	d4ee      	bmi.n	80040c8 <__smakebuf_r+0x18>
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	f043 0302 	orr.w	r3, r3, #2
 80040f2:	81a3      	strh	r3, [r4, #12]
 80040f4:	e7e2      	b.n	80040bc <__smakebuf_r+0xc>
 80040f6:	89a3      	ldrh	r3, [r4, #12]
 80040f8:	6020      	str	r0, [r4, #0]
 80040fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	9b01      	ldr	r3, [sp, #4]
 8004102:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004106:	b15b      	cbz	r3, 8004120 <__smakebuf_r+0x70>
 8004108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800410c:	4630      	mov	r0, r6
 800410e:	f000 f81d 	bl	800414c <_isatty_r>
 8004112:	b128      	cbz	r0, 8004120 <__smakebuf_r+0x70>
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	f023 0303 	bic.w	r3, r3, #3
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	81a3      	strh	r3, [r4, #12]
 8004120:	89a3      	ldrh	r3, [r4, #12]
 8004122:	431d      	orrs	r5, r3
 8004124:	81a5      	strh	r5, [r4, #12]
 8004126:	e7cf      	b.n	80040c8 <__smakebuf_r+0x18>

08004128 <_fstat_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4d07      	ldr	r5, [pc, #28]	@ (8004148 <_fstat_r+0x20>)
 800412c:	2300      	movs	r3, #0
 800412e:	4604      	mov	r4, r0
 8004130:	4608      	mov	r0, r1
 8004132:	4611      	mov	r1, r2
 8004134:	602b      	str	r3, [r5, #0]
 8004136:	f7fc fea0 	bl	8000e7a <_fstat>
 800413a:	1c43      	adds	r3, r0, #1
 800413c:	d102      	bne.n	8004144 <_fstat_r+0x1c>
 800413e:	682b      	ldr	r3, [r5, #0]
 8004140:	b103      	cbz	r3, 8004144 <_fstat_r+0x1c>
 8004142:	6023      	str	r3, [r4, #0]
 8004144:	bd38      	pop	{r3, r4, r5, pc}
 8004146:	bf00      	nop
 8004148:	20000328 	.word	0x20000328

0800414c <_isatty_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	4d06      	ldr	r5, [pc, #24]	@ (8004168 <_isatty_r+0x1c>)
 8004150:	2300      	movs	r3, #0
 8004152:	4604      	mov	r4, r0
 8004154:	4608      	mov	r0, r1
 8004156:	602b      	str	r3, [r5, #0]
 8004158:	f7fc fe9f 	bl	8000e9a <_isatty>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_isatty_r+0x1a>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_isatty_r+0x1a>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	20000328 	.word	0x20000328

0800416c <_init>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	bf00      	nop
 8004170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004172:	bc08      	pop	{r3}
 8004174:	469e      	mov	lr, r3
 8004176:	4770      	bx	lr

08004178 <_fini>:
 8004178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417a:	bf00      	nop
 800417c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417e:	bc08      	pop	{r3}
 8004180:	469e      	mov	lr, r3
 8004182:	4770      	bx	lr
